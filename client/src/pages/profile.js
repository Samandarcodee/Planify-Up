import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { User, Settings, Trophy, TrendingUp, Calendar, Moon, Sun, Globe } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { AppHeader } from "@/components/app-header";
import { BottomNavigation } from "@/components/bottom-navigation";
import { NotificationPanel } from "@/components/notification-panel";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { tgApp } from "@/lib/telegram";
import { useTheme } from "@/lib/theme";
import { useLanguage } from "@/lib/language";
import { userService } from "@/lib/user-service";
export default function Profile() {
    const [currentUserId, setCurrentUserId] = useState("demo-user");
    const telegramUser = tgApp.getUser();
    const { theme, setTheme } = useTheme();
    const { language, setLanguage, t } = useLanguage();
    useEffect(() => {
        const initUser = async () => {
            const user = await userService.getCurrentUser();
            if (user) {
                setCurrentUserId(user.id);
            }
        };
        initUser();
    }, []);
    const { data: stats } = useQuery({
        queryKey: ["/api/stats", currentUserId],
        enabled: !!currentUserId,
    });
    const { data: achievements = [] } = useQuery({
        queryKey: ["/api/achievements", currentUserId],
        enabled: !!currentUserId,
    });
    const displayName = telegramUser?.first_name || "Foydalanuvchi";
    const username = telegramUser?.username || "username";
    return (_jsxs("div", { className: "min-h-screen bg-background pb-20", children: [_jsx(AppHeader, {}), _jsxs("main", { className: "px-4", children: [_jsx("section", { className: "mt-6 mb-8", children: _jsx(Card, { children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx("div", { className: "w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4", children: _jsx(User, { className: "w-10 h-10 text-primary-foreground" }) }), _jsx("h2", { className: "text-xl font-bold text-foreground mb-1", "data-testid": "text-user-name", children: displayName }), _jsxs("p", { className: "text-muted-foreground mb-4", "data-testid": "text-username", children: ["@", username] }), _jsxs("div", { className: "grid grid-cols-3 gap-4 text-center", children: [_jsxs("div", { children: [_jsx("div", { className: "text-lg font-bold text-primary", "data-testid": "text-profile-total-tasks", children: stats?.totalTasks || 0 }), _jsx("div", { className: "text-xs text-muted-foreground", children: t('profile.tasks') })] }), _jsxs("div", { children: [_jsx("div", { className: "text-lg font-bold text-secondary", "data-testid": "text-profile-total-goals", children: stats?.totalGoals || 0 }), _jsx("div", { className: "text-xs text-muted-foreground", children: t('profile.goals') })] }), _jsxs("div", { children: [_jsx("div", { className: "text-lg font-bold text-accent", "data-testid": "text-profile-achievements", children: achievements.length }), _jsx("div", { className: "text-xs text-muted-foreground", children: "Yutuqlar" })] })] })] }) }) }), _jsxs("section", { className: "mb-8", children: [_jsx("h3", { className: "text-lg font-semibold text-foreground mb-4", children: "Statistika" }), _jsxs("div", { className: "space-y-4", children: [_jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-3", children: _jsxs(CardTitle, { className: "text-sm font-medium text-muted-foreground flex items-center", children: [_jsx(TrendingUp, { className: "w-4 h-4 mr-2" }), "Umumiy ko'rsatkichlar"] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Bajarilgan vazifalar" }), _jsx("span", { className: "font-medium", children: stats?.completedTasks || 0 })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Bajarilgan maqsadlar" }), _jsx("span", { className: "font-medium", children: stats?.completedGoals || 0 })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Haftalik bajarish" }), _jsxs("span", { className: "font-medium", children: [stats?.weeklyCompletionRate || 0, "%"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Joriy ketma-ketlik" }), _jsxs("span", { className: "font-medium", children: [stats?.currentStreak || 0, " kun"] })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { className: "pb-3", children: _jsxs(CardTitle, { className: "text-sm font-medium text-muted-foreground flex items-center", children: [_jsx(Calendar, { className: "w-4 h-4 mr-2" }), "Bu oyda"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "text-center", children: [_jsxs("div", { className: "text-2xl font-bold text-primary mb-1", children: [Math.round((stats?.completedTasks || 0) / Math.max((stats?.totalTasks || 1), 1) * 100), "%"] }), _jsx("div", { className: "text-sm text-muted-foreground", children: "Bajarish darajasi" }), _jsx(Progress, { value: (stats?.completedTasks || 0) / Math.max((stats?.totalTasks || 1), 1) * 100, className: "mt-2" })] }) })] })] })] }), _jsxs("section", { className: "mb-8", children: [_jsx("h3", { className: "text-lg font-semibold text-foreground mb-4", children: "So'nggi yutuqlar" }), achievements.length === 0 ? (_jsx(Card, { children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx(Trophy, { className: "w-12 h-12 text-muted-foreground mx-auto mb-4" }), _jsx("p", { className: "text-muted-foreground mb-4", children: "Hali yutuqlar yo'q" }), _jsx("p", { className: "text-sm text-muted-foreground", children: t('profile.motivation') })] }) })) : (_jsx("div", { className: "space-y-3", children: achievements.slice(0, 5).map((achievement) => (_jsx(Card, { className: "hover:shadow-md transition-shadow", children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("div", { className: "w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center bounce-in", children: _jsx(Trophy, { className: "w-6 h-6 text-secondary" }) }), _jsxs("div", { className: "flex-1", children: [_jsx("div", { className: "font-medium text-foreground", "data-testid": `text-achievement-title-${achievement.id}`, children: achievement.title }), _jsx("div", { className: "text-sm text-muted-foreground", children: achievement.description })] }), _jsx("div", { className: "text-xs text-muted-foreground", children: new Date(achievement.date).toLocaleDateString('uz-UZ') })] }) }) }, achievement.id))) }))] }), _jsxs("section", { className: "mb-8", children: [_jsx("h3", { className: "text-lg font-semibold text-foreground mb-4", children: t('profile.settings') }), _jsxs("div", { className: "space-y-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Globe, { className: "w-5 h-5 text-muted-foreground" }), _jsx("span", { className: "font-medium", children: t('profile.language') })] }), _jsxs(Select, { value: language, onValueChange: (value) => setLanguage(value), children: [_jsx(SelectTrigger, { className: "w-32", children: _jsx(SelectValue, { placeholder: "Til tanlash" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "uz", children: "O'zbek" }), _jsx(SelectItem, { value: "ru", children: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439" }), _jsx(SelectItem, { value: "en", children: "English" })] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [theme === 'dark' ? (_jsx(Moon, { className: "w-5 h-5 text-muted-foreground" })) : (_jsx(Sun, { className: "w-5 h-5 text-muted-foreground" })), _jsx("span", { className: "font-medium", children: t('profile.theme') })] }), _jsxs(Select, { value: theme, onValueChange: (value) => setTheme(value), children: [_jsx(SelectTrigger, { className: "w-32", children: _jsx(SelectValue, { placeholder: "Rejim" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "light", children: t('profile.light_mode') }), _jsx(SelectItem, { value: "dark", children: t('profile.dark_mode') }), _jsx(SelectItem, { value: "system", children: t('profile.system_mode') })] })] })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "space-y-3", children: [_jsxs(Button, { variant: "ghost", className: "w-full justify-start", "data-testid": "button-settings", children: [_jsx(Settings, { className: "w-4 h-4 mr-3" }), t('profile.settings')] }), _jsx(Button, { variant: "ghost", className: "w-full justify-start text-destructive hover:text-destructive", "data-testid": "button-logout", children: t('profile.logout') })] }) }) })] })] }), _jsx("section", { className: "mb-8", children: _jsx(NotificationPanel, { userId: currentUserId }) })] }), _jsx(BottomNavigation, {})] }));
}
