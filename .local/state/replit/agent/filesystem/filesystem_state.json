{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\n\nThis is a task and goal management application built with a React frontend and Express.js backend. The app is designed as a Telegram Web App (TWA) for personal productivity tracking, allowing users to manage daily tasks, set long-term goals, track achievements, and view their progress through various interfaces including a calendar view and dashboard.\n\nThe application features a modern UI built with shadcn/ui components, uses Drizzle ORM for database operations with PostgreSQL, and includes comprehensive task management capabilities with categories, time tracking, and goal completion tracking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite with custom configuration for client-side builds\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system and CSS variables\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Forms**: React Hook Form with Zod validation\n- **Layout**: Mobile-first responsive design with bottom navigation\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Module System**: ES modules throughout the application\n- **API Design**: RESTful API with JSON responses\n- **Error Handling**: Centralized error middleware with structured error responses\n- **Development**: Hot reload with Vite middleware integration\n- **Request Logging**: Custom middleware for API request/response logging\n\n### Database Architecture\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Design**: Four main entities (users, tasks, goals, achievements) with proper foreign key relationships\n- **Migration System**: Drizzle Kit for schema migrations\n- **Storage Interface**: Abstract storage interface with in-memory implementation for development\n\n### Data Models\n- **Users**: Basic user information with optional Telegram integration\n- **Tasks**: Daily tasks with categories, time slots, completion status, and date tracking\n- **Goals**: Long-term objectives with progress tracking, target values, and deadlines\n- **Achievements**: User accomplishments with different types (streaks, milestones, goal completions)\n\n### Authentication & User Management\n- **Telegram Integration**: Built-in support for Telegram Web App user authentication\n- **User Identification**: Supports both username-based and Telegram ID-based user lookup\n- **Session Management**: Designed to work within Telegram Web App context\n\n### Development & Build System\n- **Development Server**: Vite dev server with Express API proxy\n- **Build Process**: Separate frontend (Vite) and backend (esbuild) build processes\n- **TypeScript**: Strict TypeScript configuration with path mapping\n- **Code Organization**: Shared schema and types between frontend and backend\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for database connectivity\n- **drizzle-orm**: Modern TypeScript ORM for database operations\n- **drizzle-kit**: CLI tool for database migrations and schema management\n- **express**: Web application framework for the backend API\n- **react**: Frontend framework for building the user interface\n- **vite**: Build tool and development server\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework for styling\n- **class-variance-authority**: Utility for handling conditional CSS classes\n- **lucide-react**: Icon library with React components\n\n### Data Management and Validation\n- **@tanstack/react-query**: Server state management and caching\n- **react-hook-form**: Form management with validation\n- **@hookform/resolvers**: Form validation resolvers including Zod integration\n- **zod**: TypeScript-first schema validation library\n- **drizzle-zod**: Integration between Drizzle ORM and Zod validation\n\n### Development and Build Tools\n- **typescript**: Static type checking for JavaScript\n- **@vitejs/plugin-react**: Vite plugin for React support\n- **esbuild**: Fast JavaScript/TypeScript bundler for backend builds\n- **tsx**: TypeScript execution environment for development\n\n### Telegram Integration\n- **Telegram Web Apps API**: Browser-based API for Telegram Web App integration (loaded via CDN)\n\n### Database Connection\n- **PostgreSQL**: Primary database system accessed through Neon serverless platform\n- **Connection Management**: Environment-based database URL configuration","size_bytes":4680},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        slideUp: {\n          from: {\n            transform: \"translateY(20px)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        bounceIn: {\n          \"0%\": { transform: \"scale(0.3)\", opacity: \"0\" },\n          \"50%\": { transform: \"scale(1.05)\" },\n          \"70%\": { transform: \"scale(0.9)\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n        \"bounce-in\": \"bounceIn 0.6s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3314},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/bot.ts":{"content":"import TelegramBot from 'node-telegram-bot-api';\n\nconst token = process.env.TELEGRAM_BOT_TOKEN;\n\nif (!token) {\n  console.log('Telegram bot token not found. Bot will not start.');\n  process.exit(0);\n}\n\n// Create a bot without polling in Replit environment\nconst bot = new TelegramBot(token, { \n  polling: false\n});\n\n// Bot kommandalari\nbot.onText(/\\/start/, (msg) => {\n  const chatId = msg.chat.id;\n  const firstName = msg.from?.first_name || 'Foydalanuvchi';\n  \n  const welcomeMessage = `Xush kelibsiz, Planify Up!\n\nBu bot sizga yordam beradi:\n\n📝 Kunlik vazifalarni boshqarish\n🎯 Maqsadlar qo'yish va amalga oshirish\n📊 Progressingizni kuzatish\n🏆 Yutuqlarga erishish\n\nMini ilovaga kirish uchun pastdagi tugmani bosing! 👇`;\n\n  const options = {\n    reply_markup: {\n      inline_keyboard: [\n        [\n          {\n            text: '🚀 Sayohatni boshlash',\n            web_app: {\n              url: process.env.REPLIT_DOMAINS?.split(',')[0] \n                ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}`\n                : 'https://your-replit-domain.replit.app'\n            }\n          }\n        ]\n      ]\n    }\n  };\n\n  bot.sendMessage(chatId, welcomeMessage, options);\n});\n\nbot.onText(/\\/help/, (msg) => {\n  const chatId = msg.chat.id;\n  \n  const helpMessage = `🎯 **Planify Up - Sizning shaxsiy assistentingiz**\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**🎮 Asosiy komandalar:**\n🚀 /start - Ilovani ishga tushirish\n🆘 /help - Batafsil yo'riqnoma\n\n**📱 Ilovadan foydalanish:**\n✨ \"🚀 Sayohatni boshlash\" tugmasini bosing\n🌐 Til (O'zbek/Rus/Ingliz) ni Profil bo'limidan tanlang\n➕ Yangi vazifa qo'shish - \"+\" tugmasini bosing\n📊 Statistikada progressingizni kuzating\n🎯 Maqsadlar yarating va ularni amalga oshiring\n📅 Kunlik rejalaringizni tuzib boring\n\n**🏆 Imkoniyatlar:**\n• Vazifalarni kategoriyalar bo'yicha guruhlash\n• Maqsadlar uchun progress tracking\n• Achievement tizimi orqali motivatsiya\n• Har kuni yangi challenge'lar\n• Shaxsiy statistika va tahlillar\n\n**🔧 Yordam kerakmi?**\nMuammo bo'lsa, /start ni qayta ishlatib ko'ring\nPlanify Up - sizning muvaffaqiyat kalit! 🗝️✨`;\n\n  bot.sendMessage(chatId, helpMessage);\n});\n\n// Xato holatlarini boshqarish\nbot.on('polling_error', (error) => {\n  console.log('Polling error:', error);\n});\n\nbot.on('webhook_error', (error) => {\n  console.log('Webhook error:', error);\n});\n\n// Webhook endpoint qo'shamiz\nexport const setupBotWebhook = (app: any) => {\n  const webhookPath = `/bot${token}`;\n  \n  app.post(webhookPath, (req: any, res: any) => {\n    bot.processUpdate(req.body);\n    res.sendStatus(200);\n  });\n  \n  // Set webhook URL if in production\n  if (process.env.REPLIT_DOMAINS) {\n    const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n    const webhookUrl = `https://${domain}${webhookPath}`;\n    \n    bot.setWebHook(webhookUrl).then(() => {\n      console.log(`Telegram bot webhook set to: ${webhookUrl}`);\n    }).catch((error) => {\n      console.log('Failed to set webhook:', error.message);\n    });\n  }\n};\n\nconsole.log('Telegram bot configured successfully! 🤖');\n\nexport { bot };","size_bytes":3159},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupBotWebhook } from \"./bot\"; // Telegram bot ni ishga tushirish\nimport { scheduler } from \"./scheduler\"; // Notification scheduler\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Telegram bot webhook setup\n  setupBotWebhook(app);\n  \n  // Notification scheduler ni ishga tushirish\n  scheduler.start();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2339},"server/notification-service.ts":{"content":"import { bot } from './bot';\nimport { storage } from './storage';\nimport type { User, Task, Goal } from '@shared/schema';\n\nexport interface NotificationMessage {\n  userId: string;\n  telegramId: string;\n  message: string;\n  type: 'task_reminder' | 'goal_progress' | 'achievement' | 'daily_summary' | 'motivation';\n}\n\nexport class NotificationService {\n  private static instance: NotificationService;\n\n  public static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  // Vazifa eslatmasi yuborish\n  async sendTaskReminder(userId: string, task: Task): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user?.telegramId) return;\n\n      const message = `⏰ Vazifa eslatmasi!\n\n📝 ${task.title}\n📅 Bugun: ${task.time || 'Vaqt belgilanmagan'}\n📂 Kategoriya: ${task.category}\n\n${task.description ? `📄 ${task.description}` : ''}\n\nVazifani bajarishni unutmang! 💪`;\n\n      await this.sendNotification(user.telegramId, message);\n    } catch (error) {\n      console.error('Task reminder yuborishda xato:', error);\n    }\n  }\n\n  // Maqsad progress xabari\n  async sendGoalProgress(userId: string, goal: Goal): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user?.telegramId) return;\n\n      const progress = Math.round((goal.currentValue! / goal.targetValue) * 100);\n      \n      let message = `🎯 Maqsad progressi yangilandi!\n\n📊 ${goal.title}\n📈 Progress: ${goal.currentValue}/${goal.targetValue} ${goal.unit} (${progress}%)\n📅 Muddat: ${goal.deadline}\n\n`;\n\n      if (progress >= 100) {\n        message += `🎉 Tabriklaymiz! Maqsadingizni muvaffaqiyatli amalga oshirdingiz! 🏆`;\n      } else if (progress >= 75) {\n        message += `🔥 Ajoyib! Deyarli maqsadga yetdingiz! Davom eting! 💪`;\n      } else if (progress >= 50) {\n        message += `👍 Yaxshi natija! Yarim yo'lni bosib o'tdingiz! 🚀`;\n      } else if (progress >= 25) {\n        message += `✨ Yaxshi boshlanish! Davom eting! 📈`;\n      } else {\n        message += `🌱 Birinchi qadamlar qo'yildi! Oldinga! 🎯`;\n      }\n\n      await this.sendNotification(user.telegramId, message);\n    } catch (error) {\n      console.error('Goal progress yuborishda xato:', error);\n    }\n  }\n\n  // Yutuq xabari\n  async sendAchievementUnlock(userId: string, achievement: { title: string; description: string; type: string }): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user?.telegramId) return;\n\n      const emoji = this.getAchievementEmoji(achievement.type);\n      \n      const message = `🏆 Yangi yutuq qo'lga kiritildi!\n\n${emoji} ${achievement.title}\n\n${achievement.description}\n\nTabriklaymiz! Sizning mehnatingizdagi davomiylik va intilish ajoyib natija berdi! 🎉✨\n\nKeyingi yutuqlar uchun davom eting! 💪🚀`;\n\n      await this.sendNotification(user.telegramId, message);\n    } catch (error) {\n      console.error('Achievement yuborishda xato:', error);\n    }\n  }\n\n  // Kunlik xulosa\n  async sendDailySummary(userId: string): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user?.telegramId) return;\n\n      const today = new Date().toISOString().split('T')[0];\n      const todayTasks = await storage.getTasksByDate(userId, today);\n      const completedTasks = todayTasks.filter(task => task.completed);\n      const stats = await storage.getUserStats(userId);\n\n      const completionRate = todayTasks.length > 0 ? Math.round((completedTasks.length / todayTasks.length) * 100) : 0;\n\n      let message = `📊 Bugungi kun xulosasi\n\n📝 Vazifalar: ${completedTasks.length}/${todayTasks.length} bajarildi\n📈 Bajarilish darajasi: ${completionRate}%\n🔥 Umuman streak: ${stats.currentStreak} kun\n\n`;\n\n      if (completionRate === 100 && todayTasks.length > 0) {\n        message += `🎉 Mukammal! Bugungi barcha vazifalarni bajardingiz! 🏆`;\n      } else if (completionRate >= 80) {\n        message += `👏 Ajoyib kun bo'ldi! Deyarli barcha rejalarni amalga oshirdingiz! 🌟`;\n      } else if (completionRate >= 60) {\n        message += `👍 Yaxshi natija! Ertaga yanada yaxshi bo'ladi! 💪`;\n      } else if (completionRate >= 40) {\n        message += `🌱 Yaxshi boshlanish! Ertaga ko'proq qilishga harakat qiling! 📈`;\n      } else {\n        message += `💡 Ertaga yangi imkoniyatlar! Kichik qadamlar ham muhim! 🚀`;\n      }\n\n      message += `\\n\\nErtaga ham muvaffaqiyatli kun bo'lsin! 🌅`;\n\n      await this.sendNotification(user.telegramId, message);\n    } catch (error) {\n      console.error('Daily summary yuborishda xato:', error);\n    }\n  }\n\n  // Motivatsion xabar\n  async sendMotivationalMessage(userId: string): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user?.telegramId) return;\n\n      const motivationalMessages = [\n        `🌟 Har bir katta muvaffaqiyat kichik qadamlardan boshlanadi! Bugun qanday qadamlarni qo'yasiz? 🚀`,\n        `💪 Sizning imkoniyatlaringiz cheksiz! Bugun o'zingizga ishoning va oldinga boring! ✨`,\n        `🎯 Maqsadlaringiz sizni kutmoqda! Har bir kun yangi imkoniyat! 🌅`,\n        `🔥 Muvaffaqiyat yo'lida eng muhimi - davomiylik! Siz bunga qodirsiz! 💫`,\n        `🌱 Kichik o'zgarishlar katta natijalar beradi! Bugun bitta vazifani bajarishdan boshlang! 📈`,\n        `🏆 Siz ajoyib natijalarga erishishingiz mumkin! Faqat boshlash kerak! ⚡`,\n        `✨ Har bir yangi kun - yangi imkoniyat! Bugun qanday yutuqlarga erisha olasiz? 🎉`\n      ];\n\n      const randomMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      \n      await this.sendNotification(user.telegramId, randomMessage);\n    } catch (error) {\n      console.error('Motivational message yuborishda xato:', error);\n    }\n  }\n\n  // Asosiy notification yuborish funksiyasi\n  private async sendNotification(telegramId: string, message: string): Promise<void> {\n    try {\n      await bot.sendMessage(telegramId, message, {\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true\n      });\n      console.log(`Notification yuborildi: ${telegramId}`);\n    } catch (error) {\n      console.error('Notification yuborishda xato:', error);\n    }\n  }\n\n  // Yutuq emoji olish\n  private getAchievementEmoji(type: string): string {\n    const emojiMap: { [key: string]: string } = {\n      'streak': '🔥',\n      'goal_completed': '🎯',\n      'milestone': '🏁',\n      'first_task': '🌟',\n      'productivity': '⚡',\n      'consistency': '💎',\n      'champion': '👑'\n    };\n    return emojiMap[type] || '🏆';\n  }\n\n  // Haftalik hisobot\n  async sendWeeklyReport(userId: string): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user?.telegramId) return;\n\n      const stats = await storage.getUserStats(userId);\n      const goals = await storage.getActiveGoals(userId);\n      \n      let message = `📊 Haftalik hisobot\n\n📝 Jami vazifalar: ${stats.totalTasks}\n✅ Bajarilgan: ${stats.completedTasks}\n📈 Haftalik bajarilish: ${stats.weeklyCompletionRate}%\n🎯 Faol maqsadlar: ${goals.length}\n🏆 Bajarilgan maqsadlar: ${stats.completedGoals}\n\n`;\n\n      if (stats.weeklyCompletionRate >= 80) {\n        message += `🎉 Ajoyib hafta! Siz juda yaxshi natijalar ko'rsatdingiz! 🌟`;\n      } else if (stats.weeklyCompletionRate >= 60) {\n        message += `👍 Yaxshi natija! Keyingi hafta yanada yaxshi bo'ladi! 💪`;\n      } else {\n        message += `🌱 Yangi hafta - yangi imkoniyatlar! Kichik qadamlar ham muhim! 🚀`;\n      }\n\n      message += `\\n\\nKeyingi hafta ham muvaffaqiyatli bo'lsin! 🎯`;\n\n      await this.sendNotification(user.telegramId, message);\n    } catch (error) {\n      console.error('Weekly report yuborishda xato:', error);\n    }\n  }\n}\n\nexport const notificationService = NotificationService.getInstance();","size_bytes":7995},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertTaskSchema, insertGoalSchema, insertAchievementSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid user data\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.get(\"/api/users/telegram/:telegramId\", async (req, res) => {\n    try {\n      const user = await storage.getUserByTelegramId(req.params.telegramId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks/:userId\", async (req, res) => {\n    try {\n      const tasks = await storage.getUserTasks(req.params.userId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:userId/date/:date\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasksByDate(req.params.userId, req.params.date);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get tasks for date\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid task data\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const task = await storage.updateTask(req.params.id, updates);\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTask(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      res.json({ message: \"Task deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Goal routes\n  app.get(\"/api/goals/:userId\", async (req, res) => {\n    try {\n      const goals = await storage.getUserGoals(req.params.userId);\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get goals\" });\n    }\n  });\n\n  app.get(\"/api/goals/:userId/active\", async (req, res) => {\n    try {\n      const goals = await storage.getActiveGoals(req.params.userId);\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get active goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const goalData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(goalData);\n      res.json(goal);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid goal data\" });\n    }\n  });\n\n  app.patch(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const goal = await storage.updateGoal(req.params.id, updates);\n      if (!goal) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n      res.json(goal);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update goal\" });\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteGoal(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n      res.json({ message: \"Goal deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete goal\" });\n    }\n  });\n\n  // Achievement routes\n  app.get(\"/api/achievements/:userId\", async (req, res) => {\n    try {\n      const achievements = await storage.getUserAchievements(req.params.userId);\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get achievements\" });\n    }\n  });\n\n  app.post(\"/api/achievements\", async (req, res) => {\n    try {\n      const achievementData = insertAchievementSchema.parse(req.body);\n      const achievement = await storage.createAchievement(achievementData);\n      res.json(achievement);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid achievement data\" });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats/:userId\", async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.userId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user statistics\" });\n    }\n  });\n\n  // Notification routes\n  app.post(\"/api/notifications/send\", async (req, res) => {\n    try {\n      const { userId, type } = req.body;\n      if (!userId || !type) {\n        return res.status(400).json({ message: \"userId and type are required\" });\n      }\n\n      const { scheduler } = await import(\"./scheduler\");\n      await scheduler.sendImmediateNotification(userId, type);\n      \n      res.json({ message: \"Notification sent successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send notification\" });\n    }\n  });\n\n  app.post(\"/api/notifications/test\", async (req, res) => {\n    try {\n      const { notificationService } = await import(\"./notification-service\");\n      \n      // Test notification\n      await notificationService.sendMotivationalMessage(\"722b51ba-3593-44ac-82e1-ae79ac0c3304\");\n      \n      res.json({ message: \"Test notification sent\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send test notification\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6722},"server/scheduler.ts":{"content":"import { notificationService } from './notification-service';\nimport { storage } from './storage';\n\nexport class NotificationScheduler {\n  private static instance: NotificationScheduler;\n  private intervals: { [key: string]: NodeJS.Timeout } = {};\n\n  public static getInstance(): NotificationScheduler {\n    if (!NotificationScheduler.instance) {\n      NotificationScheduler.instance = new NotificationScheduler();\n    }\n    return NotificationScheduler.instance;\n  }\n\n  // Scheduler ni ishga tushirish\n  public start(): void {\n    console.log('🔔 Notification Scheduler ishga tushdi');\n\n    // Har 30 daqiqada vazifa eslatmalari\n    this.intervals.taskReminders = setInterval(async () => {\n      await this.sendTaskReminders();\n    }, 30 * 60 * 1000); // 30 daqiqa\n\n    // Kunlik xulosa (soat 20:00 da)\n    this.intervals.dailySummary = setInterval(async () => {\n      const now = new Date();\n      if (now.getHours() === 20 && now.getMinutes() === 0) {\n        await this.sendDailySummaries();\n      }\n    }, 60 * 1000); // Har daqiqada tekshirish\n\n    // Motivatsion xabarlar (ertalab 9:00 da)\n    this.intervals.motivation = setInterval(async () => {\n      const now = new Date();\n      if (now.getHours() === 9 && now.getMinutes() === 0) {\n        await this.sendMotivationalMessages();\n      }\n    }, 60 * 1000); // Har daqiqada tekshirish\n\n    // Haftalik hisobot (yakshanba kuni soat 18:00 da)\n    this.intervals.weeklyReport = setInterval(async () => {\n      const now = new Date();\n      if (now.getDay() === 0 && now.getHours() === 18 && now.getMinutes() === 0) {\n        await this.sendWeeklyReports();\n      }\n    }, 60 * 1000); // Har daqiqada tekshirish\n  }\n\n  // Scheduler ni to'xtatish\n  public stop(): void {\n    Object.values(this.intervals).forEach(interval => {\n      clearInterval(interval);\n    });\n    this.intervals = {};\n    console.log('🔕 Notification Scheduler to\\'xtatildi');\n  }\n\n  // Vazifa eslatmalarini yuborish\n  private async sendTaskReminders(): Promise<void> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const currentHour = new Date().getHours();\n      \n      // Barcha foydalanuvchilarni olish (soddalashtirilgan)\n      const users = await this.getAllUsers();\n      \n      for (const user of users) {\n        if (!user.telegramId) continue;\n        \n        const todayTasks = await storage.getTasksByDate(user.id, today);\n        const pendingTasks = todayTasks.filter(task => !task.completed && task.time);\n        \n        for (const task of pendingTasks) {\n          if (task.time) {\n            const taskHour = parseInt(task.time.split(':')[0]);\n            // 30 daqiqa oldin eslatma\n            if (currentHour === taskHour - 1) {\n              await notificationService.sendTaskReminder(user.id, task);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Task reminders yuborishda xato:', error);\n    }\n  }\n\n  // Kunlik xulosalarni yuborish\n  private async sendDailySummaries(): Promise<void> {\n    try {\n      const users = await this.getAllUsers();\n      \n      for (const user of users) {\n        if (user.telegramId) {\n          await notificationService.sendDailySummary(user.id);\n        }\n      }\n    } catch (error) {\n      console.error('Daily summaries yuborishda xato:', error);\n    }\n  }\n\n  // Motivatsion xabarlarni yuborish\n  private async sendMotivationalMessages(): Promise<void> {\n    try {\n      const users = await this.getAllUsers();\n      \n      for (const user of users) {\n        if (user.telegramId) {\n          // Tasodifiy ravishda 50% foydalanuvchilarga yuborish\n          if (Math.random() > 0.5) {\n            await notificationService.sendMotivationalMessage(user.id);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Motivational messages yuborishda xato:', error);\n    }\n  }\n\n  // Haftalik hisobotlarni yuborish\n  private async sendWeeklyReports(): Promise<void> {\n    try {\n      const users = await this.getAllUsers();\n      \n      for (const user of users) {\n        if (user.telegramId) {\n          await notificationService.sendWeeklyReport(user.id);\n        }\n      }\n    } catch (error) {\n      console.error('Weekly reports yuborishda xato:', error);\n    }\n  }\n\n  // Barcha foydalanuvchilarni olish (yordamchi funksiya)\n  private async getAllUsers() {\n    // Bu soddalashtirilgan usul - aslida database dan barcha foydalanuvchilarni olish kerak\n    // Hozircha mavjud foydalanuvchilarni qaytaramiz\n    const users = [];\n    \n    // Demo user\n    try {\n      const demoUser = await storage.getUser('722b51ba-3593-44ac-82e1-ae79ac0c3304');\n      if (demoUser) users.push(demoUser);\n    } catch (e) {}\n    \n    // Telegram users ni qo'shish mumkin\n    return users;\n  }\n\n  // Manual notification yuborish\n  public async sendImmediateNotification(userId: string, type: 'task_reminder' | 'goal_progress' | 'achievement' | 'motivation'): Promise<void> {\n    try {\n      switch (type) {\n        case 'motivation':\n          await notificationService.sendMotivationalMessage(userId);\n          break;\n        case 'achievement':\n          // Demo achievement\n          await notificationService.sendAchievementUnlock(userId, {\n            title: 'Test yutuq',\n            description: 'Bu test yutuqi!',\n            type: 'milestone'\n          });\n          break;\n        default:\n          console.log('Manual notification type not implemented:', type);\n      }\n    } catch (error) {\n      console.error('Manual notification yuborishda xato:', error);\n    }\n  }\n}\n\nexport const scheduler = NotificationScheduler.getInstance();","size_bytes":5604},"server/storage.ts":{"content":"import { users, type User, type InsertUser, tasks, type Task, type InsertTask, goals, type Goal, type InsertGoal, achievements, type Achievement, type InsertAchievement } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByTelegramId(telegramId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Task methods\n  getUserTasks(userId: string): Promise<Task[]>;\n  getTasksByDate(userId: string, date: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  \n  // Goal methods\n  getUserGoals(userId: string): Promise<Goal[]>;\n  getActiveGoals(userId: string): Promise<Goal[]>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, updates: Partial<Goal>): Promise<Goal | undefined>;\n  deleteGoal(id: string): Promise<boolean>;\n  \n  // Achievement methods\n  getUserAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  \n  // Statistics methods\n  getUserStats(userId: string): Promise<{\n    totalTasks: number;\n    completedTasks: number;\n    totalGoals: number;\n    completedGoals: number;\n    currentStreak: number;\n    weeklyCompletionRate: number;\n  }>;\n}\n\n// MemStorage kept for backup, using DatabaseStorage now\n\n// DatabaseStorage implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByTelegramId(telegramId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.telegramId, telegramId));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Task methods\n  async getUserTasks(userId: string): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.userId, userId));\n  }\n\n  async getTasksByDate(userId: string, date: string): Promise<Task[]> {\n    return await db.select().from(tasks).where(and(eq(tasks.userId, userId), eq(tasks.date, date)));\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await db\n      .insert(tasks)\n      .values(insertTask)\n      .returning();\n    \n    // Vazifa yaratilganda notification yuborish\n    try {\n      const { notificationService } = await import(\"./notification-service\");\n      setTimeout(() => {\n        notificationService.sendTaskReminder(task.userId, task);\n      }, 5000); // 5 soniya kechikish bilan\n    } catch (error) {\n      console.log('Notification yuborishda xato:', error);\n    }\n    \n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined> {\n    const [task] = await db\n      .update(tasks)\n      .set(updates)\n      .where(eq(tasks.id, id))\n      .returning();\n    return task || undefined;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    const result = await db.delete(tasks).where(eq(tasks.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Goal methods\n  async getUserGoals(userId: string): Promise<Goal[]> {\n    return await db.select().from(goals).where(eq(goals.userId, userId));\n  }\n\n  async getActiveGoals(userId: string): Promise<Goal[]> {\n    return await db.select().from(goals).where(and(eq(goals.userId, userId), eq(goals.completed, false)));\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const [goal] = await db\n      .insert(goals)\n      .values(insertGoal)\n      .returning();\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<Goal>): Promise<Goal | undefined> {\n    const [goal] = await db\n      .update(goals)\n      .set(updates)\n      .where(eq(goals.id, id))\n      .returning();\n    \n    // Maqsad yangilanganda progress notification yuborish\n    if (goal && updates.currentValue !== undefined) {\n      try {\n        const { notificationService } = await import(\"./notification-service\");\n        setTimeout(() => {\n          notificationService.sendGoalProgress(goal.userId, goal);\n        }, 2000);\n      } catch (error) {\n        console.log('Goal progress notification yuborishda xato:', error);\n      }\n    }\n    \n    return goal || undefined;\n  }\n\n  async deleteGoal(id: string): Promise<boolean> {\n    const result = await db.delete(goals).where(eq(goals.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Achievement methods\n  async getUserAchievements(userId: string): Promise<Achievement[]> {\n    return await db.select().from(achievements).where(eq(achievements.userId, userId));\n  }\n\n  async createAchievement(insertAchievement: InsertAchievement): Promise<Achievement> {\n    const [achievement] = await db\n      .insert(achievements)\n      .values(insertAchievement)\n      .returning();\n    return achievement;\n  }\n\n  // Statistics methods\n  async getUserStats(userId: string): Promise<{\n    totalTasks: number;\n    completedTasks: number;\n    totalGoals: number;\n    completedGoals: number;\n    currentStreak: number;\n    weeklyCompletionRate: number;\n  }> {\n    const userTasks = await this.getUserTasks(userId);\n    const userGoals = await this.getUserGoals(userId);\n    \n    const totalTasks = userTasks.length;\n    const completedTasks = userTasks.filter(task => task.completed).length;\n    const totalGoals = userGoals.length;\n    const completedGoals = userGoals.filter(goal => goal.completed).length;\n    \n    // Calculate current streak (simplified)\n    const today = new Date().toISOString().split('T')[0];\n    const todayTasks = userTasks.filter(task => task.date === today);\n    const todayCompleted = todayTasks.filter(task => task.completed).length;\n    const currentStreak = todayCompleted; // Simplified calculation\n    \n    // Calculate weekly completion rate\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    const weekTasks = userTasks.filter(task => {\n      const taskDate = new Date(task.date);\n      return taskDate >= weekAgo;\n    });\n    const weekCompleted = weekTasks.filter(task => task.completed).length;\n    const weeklyCompletionRate = weekTasks.length > 0 ? Math.round((weekCompleted / weekTasks.length) * 100) : 0;\n    \n    return {\n      totalTasks,\n      completedTasks,\n      totalGoals,\n      completedGoals,\n      currentStreak,\n      weeklyCompletionRate,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7067},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  telegramId: text(\"telegram_id\").unique(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  time: text(\"time\"),\n  date: text(\"date\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  targetValue: integer(\"target_value\").notNull(),\n  currentValue: integer(\"current_value\").default(0),\n  unit: text(\"unit\").notNull(),\n  deadline: text(\"deadline\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // \"streak\", \"goal_completed\", \"milestone\"\n  value: integer(\"value\"),\n  date: text(\"date\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\n","size_bytes":2719},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect } from \"react\";\nimport { tgApp } from \"./lib/telegram\";\nimport { ThemeProvider } from \"./lib/theme\";\nimport { LanguageProvider } from \"./lib/language\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Tasks from \"@/pages/tasks\";\nimport Goals from \"@/pages/goals\";\nimport Calendar from \"@/pages/calendar\";\nimport Profile from \"@/pages/profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/tasks\" component={Tasks} />\n      <Route path=\"/goals\" component={Goals} />\n      <Route path=\"/calendar\" component={Calendar} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    // Initialize Telegram Web App\n    tgApp.init();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"vite-ui-theme\">\n        <LanguageProvider>\n          <TooltipProvider>\n            <div className=\"app-container min-h-screen bg-background\">\n              <Toaster />\n              <Router />\n            </div>\n          </TooltipProvider>\n        </LanguageProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1580},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(220, 13%, 18%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 13%, 18%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 13%, 18%);\n  --primary: hsl(239, 84%, 67%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(210, 40%, 92%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214.3, 31.8%, 85%);\n  --input: hsl(214.3, 31.8%, 85%);\n  --ring: hsl(239, 84%, 67%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(239, 84%, 67%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(239, 84%, 67%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(239, 84%, 67%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(239, 84%, 67%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(239, 84%, 67%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(239, 84%, 67%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.app-container {\n  width: 100%;\n  max-width: 450px;\n  margin: 0 auto;\n  min-height: 100vh;\n  padding-bottom: 80px; /* Space for bottom navigation */\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n@media (max-width: 400px) {\n  .app-container {\n    padding-left: 4px;\n    padding-right: 4px;\n  }\n  \n  .glass-effect {\n    padding: 12px 8px;\n  }\n  \n  .text-lg {\n    font-size: 1rem;\n  }\n  \n  .text-xl {\n    font-size: 1.125rem;\n  }\n  \n  .grid-cols-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    gap: 8px;\n  }\n  \n  /* Fix select width on small screens */\n  .w-32 {\n    width: 6rem;\n  }\n  \n  /* Fix text overflow */\n  .text-ellipsis {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n}\n\n/* Text overflow fixes */\n.text-overflow-fix {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 100%;\n}\n\n/* Button mobile fixes */\n.button-mobile {\n  min-width: 0;\n  flex: 1;\n  word-wrap: break-word;\n}\n\n/* Navigation text fix */\n.nav-text {\n  max-width: 60px;\n  font-size: 0.7rem;\n  line-height: 1;\n}\n\n/* Card content padding fixes for mobile */\n@media (max-width: 400px) {\n  .card-content-mobile {\n    padding: 12px 8px;\n  }\n  \n  .grid-mobile {\n    gap: 8px;\n  }\n  \n  .text-responsive {\n    font-size: 0.875rem;\n  }\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: hsl(var(--card) / 0.8);\n}\n\n.progress-ring {\n  transform: rotate(-90deg);\n}\n\n.progress-ring-circle {\n  stroke-dasharray: 283;\n  stroke-dashoffset: 283;\n  transition: stroke-dashoffset 0.35s;\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.bounce-in {\n  animation: bounceIn 0.6s ease-out;\n}\n\n@keyframes bounceIn {\n  0% { transform: scale(0.3); opacity: 0; }\n  50% { transform: scale(1.05); }\n  70% { transform: scale(0.9); }\n  100% { transform: scale(1); opacity: 1; }\n}\n","size_bytes":5633},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { tgApp } from './lib/telegram';\n\n// Initialize Telegram WebApp\nif (typeof window !== 'undefined') {\n  // Wait for Telegram WebApp to be ready\n  const initTelegram = () => {\n    if (window.Telegram?.WebApp) {\n      tgApp.init();\n      // Set theme colors based on Telegram theme\n      const themeParams = tgApp.getThemeParams();\n      if (themeParams.bg_color) {\n        document.documentElement.style.setProperty('--background', themeParams.bg_color);\n      }\n      if (themeParams.text_color) {\n        document.documentElement.style.setProperty('--foreground', themeParams.text_color);\n      }\n    } else {\n      // Retry after a short delay if Telegram WebApp is not ready\n      setTimeout(initTelegram, 100);\n    }\n  };\n  \n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initTelegram);\n  } else {\n    initTelegram();\n  }\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":1037},"client/src/components/app-header.tsx":{"content":"import { User } from \"lucide-react\";\nimport { Bell } from \"lucide-react\";\nimport { tgApp } from \"@/lib/telegram\";\nimport { useLanguage } from \"@/lib/language\";\n\ninterface AppHeaderProps {\n  userName?: string;\n  onNotificationsClick?: () => void;\n}\n\nexport function AppHeader({ userName, onNotificationsClick }: AppHeaderProps) {\n  const telegramUser = tgApp.getUser();\n  const { t } = useLanguage();\n  const displayName = userName || telegramUser?.first_name || t('common.user');\n\n  return (\n    <header className=\"sticky top-0 z-50 glass-effect border-b border-border px-4 py-3\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <User className=\"w-6 h-6 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\" data-testid=\"greeting-text\">\n              {t('dashboard.greeting', { name: displayName })}\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">{t('dashboard.ready')}</p>\n          </div>\n        </div>\n        <button \n          className=\"p-2 rounded-full hover:bg-muted transition-colors\"\n          onClick={onNotificationsClick}\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"w-6 h-6 text-muted-foreground\" />\n        </button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1476},"client/src/components/bottom-navigation.tsx":{"content":"import { Home, CheckSquare, Target, Calendar, User } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { useLanguage } from \"@/lib/language\";\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n  const { t } = useLanguage();\n  \n  const navItems = [\n    { path: \"/\", icon: Home, label: t('nav.home'), testId: \"nav-home\" },\n    { path: \"/tasks\", icon: CheckSquare, label: t('nav.tasks'), testId: \"nav-tasks\" },\n    { path: \"/goals\", icon: Target, label: t('nav.goals'), testId: \"nav-goals\" },\n    { path: \"/calendar\", icon: Calendar, label: t('nav.calendar'), testId: \"nav-calendar\" },\n    { path: \"/profile\", icon: User, label: t('nav.profile'), testId: \"nav-profile\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-[450px] bg-card border-t border-border\">\n      <div className=\"flex justify-around py-2\">\n        {navItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <button \n                className={`flex flex-col items-center space-y-1 p-3 transition-colors ${\n                  isActive \n                    ? \"text-primary\" \n                    : \"text-muted-foreground hover:text-foreground\"\n                }`}\n                data-testid={item.testId}\n              >\n                <Icon className=\"w-6 h-6\" />\n                <span className=\"nav-text font-medium text-overflow-fix\">{item.label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1694},"client/src/components/goal-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertGoalSchema, type InsertGoal } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface GoalModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  userId: string;\n}\n\nconst goalCategories = [\n  { value: \"salomatlik\", label: \"Salomatlik\" },\n  { value: \"talim\", label: \"Ta'lim\" },\n  { value: \"kasbiy\", label: \"Kasbiy rivojlanish\" },\n  { value: \"moliyaviy\", label: \"Moliyaviy\" },\n  { value: \"shaxsiy\", label: \"Shaxsiy\" },\n];\n\nexport function GoalModal({ open, onOpenChange, userId }: GoalModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<InsertGoal>({\n    resolver: zodResolver(insertGoalSchema),\n    defaultValues: {\n      userId,\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      targetValue: 1,\n      currentValue: 0,\n      unit: \"kun\",\n      deadline: \"\",\n      completed: false,\n    },\n  });\n\n  const createGoalMutation = useMutation({\n    mutationFn: async (data: InsertGoal) => {\n      const response = await apiRequest(\"POST\", \"/api/goals\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\", userId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", userId] });\n      toast({\n        title: \"Muvaffaqiyat!\",\n        description: \"Maqsad muvaffaqiyatli yaratildi.\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Xatolik!\",\n        description: \"Maqsad yaratishda xatolik yuz berdi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertGoal) => {\n    createGoalMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px] rounded-t-2xl border-0 bg-card\">\n        <div className=\"w-12 h-1 bg-muted rounded-full mx-auto mb-4\" />\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Yangi maqsad belgilash</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Maqsad nomi</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Maqsad nomini kiriting...\" \n                      {...field}\n                      data-testid=\"input-goal-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tavsif</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Maqsad haqida batafsil...\" \n                      rows={3}\n                      {...field}\n                      data-testid=\"textarea-goal-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kategoriya</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-goal-category\">\n                        <SelectValue placeholder=\"Kategoriya tanlang\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {goalCategories.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"targetValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Maqsad qiymati</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-goal-target\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Birlik</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"kun, dars, kitob...\" \n                        {...field}\n                        data-testid=\"input-goal-unit\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"deadline\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tugash sanasi</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field}\n                      data-testid=\"input-goal-deadline\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-goal\"\n              >\n                Bekor qilish\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={createGoalMutation.isPending}\n                data-testid=\"button-submit-goal\"\n              >\n                {createGoalMutation.isPending ? \"Yaratilmoqda...\" : \"Yaratish\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7844},"client/src/components/notification-panel.tsx":{"content":"import { useState } from \"react\";\nimport { Bell, Send, TestTube } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"@/lib/language\";\n\ninterface NotificationPanelProps {\n  userId: string;\n}\n\nexport function NotificationPanel({ userId }: NotificationPanelProps) {\n  const [selectedType, setSelectedType] = useState<string>(\"\");\n  const [isSending, setIsSending] = useState(false);\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const notificationTypes = [\n    { value: \"motivation\", label: \"💪 Motivatsion xabar\" },\n    { value: \"achievement\", label: \"🏆 Yutuq testi\" },\n    { value: \"task_reminder\", label: \"⏰ Vazifa eslatmasi\" },\n    { value: \"goal_progress\", label: \"🎯 Maqsad progressi\" }\n  ];\n\n  const sendNotification = async () => {\n    if (!selectedType) {\n      toast({\n        title: \"Xato\",\n        description: \"Xabar turini tanlang\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSending(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/notifications/send\", {\n        userId,\n        type: selectedType\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Muvaffaqiyat!\",\n          description: \"Xabar yuborildi\",\n        });\n      } else {\n        throw new Error(\"Xabar yuborishda xato\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Xato\",\n        description: \"Xabar yuborishda muammo yuz berdi\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const sendTestNotification = async () => {\n    setIsSending(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/notifications/test\");\n\n      if (response.ok) {\n        toast({\n          title: \"Test muvaffaqiyatli!\",\n          description: \"Test xabar yuborildi\",\n        });\n      } else {\n        throw new Error(\"Test xabar yuborishda xato\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Xato\",\n        description: \"Test xabar yuborishda muammo yuz berdi\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bell className=\"h-5 w-5\" />\n          📱 Push Xabarlar Testi\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Xabar turi:</label>\n          <Select value={selectedType} onValueChange={setSelectedType}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Xabar turini tanlang\" />\n            </SelectTrigger>\n            <SelectContent>\n              {notificationTypes.map((type) => (\n                <SelectItem key={type.value} value={type.value}>\n                  {type.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={sendNotification}\n            disabled={isSending || !selectedType}\n            className=\"flex-1\"\n          >\n            <Send className=\"h-4 w-4 mr-2\" />\n            {isSending ? \"Yuborilmoqda...\" : \"Xabar yuborish\"}\n          </Button>\n          \n          <Button \n            onClick={sendTestNotification}\n            disabled={isSending}\n            variant=\"outline\"\n          >\n            <TestTube className=\"h-4 w-4 mr-2\" />\n            Test\n          </Button>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <p>🔔 <strong>Automatic xabarlar:</strong></p>\n          <p>• Har 30 daqiqada vazifa eslatmalari</p>\n          <p>• Ertalab 9:00 da motivatsion xabarlar</p>\n          <p>• Kechqurun 20:00 da kunlik xulosa</p>\n          <p>• Yakshanba 18:00 da haftalik hisobot</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4265},"client/src/components/progress-ring.tsx":{"content":"interface ProgressRingProps {\n  progress: number; // 0-100\n  size?: number;\n  strokeWidth?: number;\n  className?: string;\n}\n\nexport function ProgressRing({ \n  progress, \n  size = 64, \n  strokeWidth = 8, \n  className = \"\" \n}: ProgressRingProps) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\n\n  return (\n    <div className={`relative ${className}`} style={{ width: size, height: size }}>\n      <svg \n        className=\"progress-ring\" \n        width={size} \n        height={size}\n        viewBox={`0 0 ${size} ${size}`}\n      >\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeOpacity=\"0.3\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n        />\n        <circle\n          className=\"progress-ring-circle\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          style={{\n            strokeDasharray: circumference,\n            strokeDashoffset: strokeDashoffset,\n          }}\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span className=\"text-sm font-bold\">{Math.round(progress)}%</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1409},"client/src/components/task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertTaskSchema, type InsertTask } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  userId: string;\n}\n\nconst taskCategories = [\n  { value: \"ish\", label: \"Ish\" },\n  { value: \"salomatlik\", label: \"Salomatlik\" },\n  { value: \"talim\", label: \"Ta'lim\" },\n  { value: \"shaxsiy\", label: \"Shaxsiy\" },\n];\n\nexport function TaskModal({ open, onOpenChange, userId }: TaskModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      userId,\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      time: \"\",\n      date: new Date().toISOString().split('T')[0],\n      completed: false,\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: InsertTask) => {\n      const response = await apiRequest(\"POST\", \"/api/tasks\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", userId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", userId] });\n      toast({\n        title: \"Muvaffaqiyat!\",\n        description: \"Vazifa muvaffaqiyatli qo'shildi.\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Xatolik!\",\n        description: \"Vazifa qo'shishda xatolik yuz berdi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertTask) => {\n    createTaskMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px] rounded-t-2xl border-0 bg-card\">\n        <div className=\"w-12 h-1 bg-muted rounded-full mx-auto mb-4\" />\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Yangi vazifa qo'shish</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Vazifa nomi</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Vazifa nomini kiriting...\" \n                      {...field}\n                      data-testid=\"input-task-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kategoriya</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-task-category\">\n                        <SelectValue placeholder=\"Kategoriya tanlang\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {taskCategories.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vaqt</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-task-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sana</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field}\n                        data-testid=\"input-task-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-task\"\n              >\n                Bekor qilish\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={createTaskMutation.isPending}\n                data-testid=\"button-submit-task\"\n              >\n                {createTaskMutation.isPending ? \"Qo'shilmoqda...\" : \"Qo'shish\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6365},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/language.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport { tgApp } from \"./telegram\";\n\ntype Language = \"uz\" | \"ru\" | \"en\";\n\ninterface LanguageProviderProps {\n  children: React.ReactNode;\n}\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string, params?: Record<string, string>) => string;\n}\n\nconst translations = {\n  uz: {\n    // Navigation\n    \"nav.home\": \"Bosh sahifa\",\n    \"nav.tasks\": \"Vazifalar\", \n    \"nav.goals\": \"Maqsadlar\",\n    \"nav.calendar\": \"Kalendar\",\n    \"nav.profile\": \"Profil\",\n    \n    // Dashboard\n    \"dashboard.greeting\": \"Salom, {name}!\",\n    \"dashboard.ready\": \"Bugungi kun uchun tayyor bo'lasizmi?\",\n    \"dashboard.today\": \"Bugungi kun\",\n    \"dashboard.completed\": \"Bajarildi\",\n    \"dashboard.total\": \"Jami\",\n    \"dashboard.streak\": \"Ketma-ketlik\",\n    \"dashboard.add_task\": \"Vazifa qo'shish\",\n    \"dashboard.add_goal\": \"Maqsad belgilash\",\n    \"dashboard.today_tasks\": \"Bugungi vazifalar\",\n    \"dashboard.no_tasks\": \"Bugungi kun uchun vazifalar yo'q\",\n    \"dashboard.add_first_task\": \"Birinchi vazifani qo'shing\",\n    \"dashboard.active_goals\": \"Faol maqsadlar\",\n    \"dashboard.no_goals\": \"Faol maqsadlar yo'q\",\n    \"dashboard.add_first_goal\": \"Birinchi maqsadni belgilang\",\n    \"dashboard.weekly_view\": \"Haftalik ko'rinish\",\n    \"dashboard.statistics\": \"Statistika\",\n    \"dashboard.weekly_completion\": \"Haftalik bajarish\",\n    \"dashboard.completed_goals\": \"Bajarilgan maqsadlar\",\n    \"dashboard.current_streak\": \"Joriy ketma-ketlik\",\n    \"dashboard.total_tasks\": \"Jami vazifalar\",\n    \n    // Tasks\n    \"tasks.title\": \"Vazifalar\",\n    \"tasks.all\": \"Barchasi\",\n    \"tasks.work\": \"Ish\",\n    \"tasks.health\": \"Salomatlik\",\n    \"tasks.education\": \"Ta'lim\",\n    \"tasks.personal\": \"Shaxsiy\",\n    \"tasks.active\": \"Faol\",\n    \"tasks.completed\": \"Bajarilgan\",\n    \"tasks.no_active\": \"Faol vazifalar yo'q\",\n    \"tasks.no_completed\": \"Hali hech qanday vazifa bajarilmagan\",\n    \"tasks.add_task\": \"Vazifa qo'shing\",\n    \n    // Goals\n    \"goals.title\": \"Maqsadlar\",\n    \"goals.active\": \"Faol\",\n    \"goals.completed\": \"Bajarilgan\",\n    \"goals.no_active\": \"Faol maqsadlar yo'q\",\n    \"goals.no_completed\": \"Hali hech qanday maqsad bajarilmagan\",\n    \"goals.add_goal\": \"Maqsad belgilang\",\n    \"goals.progress\": \"Jarayon\",\n    \"goals.deadline\": \"Tugash\",\n    \"goals.update\": \"Yangilash\",\n    \n    // Profile\n    \"profile.statistics\": \"Statistika\",\n    \"profile.tasks\": \"Vazifalar\",\n    \"profile.goals\": \"Maqsadlar\", \n    \"profile.achievements\": \"Yutuqlar\",\n    \"profile.overall\": \"Umumiy ko'rsatkichlar\",\n    \"profile.completed_tasks\": \"Bajarilgan vazifalar\",\n    \"profile.completed_goals\": \"Bajarilgan maqsadlar\",\n    \"profile.weekly_completion\": \"Haftalik bajarish\",\n    \"profile.current_streak\": \"Joriy ketma-ketlik\",\n    \"profile.this_month\": \"Bu oyda\",\n    \"profile.completion_rate\": \"Bajarish darajasi\",\n    \"profile.recent_achievements\": \"So'nggi yutuqlar\",\n    \"profile.no_achievements\": \"Hali yutuqlar yo'q\",\n    \"profile.achieve_message\": \"Vazifalarni bajaring va maqsadlarga erishing!\",\n    \"profile.settings\": \"Sozlamalar\",\n    \"profile.logout\": \"Chiqish\",\n    \"profile.language\": \"Til\",\n    \"profile.theme\": \"Mavzu\",\n    \"profile.dark_mode\": \"Tungi rejim\",\n    \"profile.light_mode\": \"Kunduzgi rejim\",\n    \n    // Forms\n    \"form.task_title\": \"Vazifa nomi\",\n    \"form.task_title_placeholder\": \"Vazifa nomini kiriting...\",\n    \"form.category\": \"Kategoriya\",\n    \"form.category_placeholder\": \"Kategoriya tanlang\",\n    \"form.time\": \"Vaqt\",\n    \"form.date\": \"Sana\",\n    \"form.cancel\": \"Bekor qilish\",\n    \"form.save\": \"Saqlash\",\n    \"form.create\": \"Yaratish\",\n    \"form.goal_title\": \"Maqsad nomi\",\n    \"form.goal_title_placeholder\": \"Maqsad nomini kiriting...\",\n    \"form.description\": \"Tavsif\",\n    \"form.description_placeholder\": \"Maqsad haqida batafsil...\",\n    \"form.target_value\": \"Maqsad qiymati\",\n    \"form.unit\": \"Birlik\",\n    \"form.unit_placeholder\": \"kun, dars, kitob...\",\n    \"form.deadline\": \"Tugash sanasi\",\n    \n    // Categories\n    \"category.work\": \"Ish\",\n    \"category.health\": \"Salomatlik\", \n    \"category.education\": \"Ta'lim\",\n    \"category.personal\": \"Shaxsiy\",\n    \"category.career\": \"Kasbiy rivojlanish\",\n    \"category.financial\": \"Moliyaviy\",\n    \n    // Common\n    \"common.loading\": \"Yuklanmoqda...\",\n    \"common.add\": \"Qo'shish\",\n    \"common.edit\": \"Tahrirlash\",\n    \"common.delete\": \"O'chirish\",\n    \"common.view_all\": \"Barchasini ko'rish\",\n    \"common.success\": \"Muvaffaqiyat!\",\n    \"common.error\": \"Xatolik!\",\n    \"common.days\": \"kun\",\n    \"common.day\": \"kun\",\n    \"common.week\": \"hafta\",\n    \"common.month\": \"oy\",\n    \"common.year\": \"yil\",\n    \"common.user\": \"Foydalanuvchi\",\n    \n    // Additional translations\n    \"profile.motivation\": \"Vazifalarni bajaring va maqsadlarga erishing!\",\n    \"profile.system_mode\": \"Sistema\",\n    \"goals.updated_success\": \"Maqsad yangilandi\",\n    \"goals.updated_error\": \"Maqsad yangilanmadi\", \n    \"goals.deleted_success\": \"Maqsad o'chirildi\",\n    \"goals.deleted_error\": \"Maqsad o'chirilmadi\",\n    \"tasks.updated_error\": \"Vazifa yangilanmadi\",\n    \"tasks.deleted_success\": \"Vazifa o'chirildi\",\n    \"tasks.deleted_error\": \"Vazifa o'chirilmadi\",\n    \n    // Dashboard additional\n    \"dashboard.add_task_desc\": \"Yangi reja\",\n    \"dashboard.add_goal_desc\": \"Yangi yo'l\",\n  },\n  \n  ru: {\n    // Navigation\n    \"nav.home\": \"Главная\",\n    \"nav.tasks\": \"Задачи\",\n    \"nav.goals\": \"Цели\", \n    \"nav.calendar\": \"Календарь\",\n    \"nav.profile\": \"Профиль\",\n    \n    // Dashboard\n    \"dashboard.greeting\": \"Привет, {name}!\",\n    \"dashboard.ready\": \"Готовы к сегодняшнему дню?\",\n    \"dashboard.today\": \"Сегодня\",\n    \"dashboard.completed\": \"Выполнено\",\n    \"dashboard.total\": \"Всего\",\n    \"dashboard.streak\": \"Серия\",\n    \"dashboard.add_task\": \"Добавить задачу\",\n    \"dashboard.add_goal\": \"Поставить цель\",\n    \"dashboard.today_tasks\": \"Сегодняшние задачи\",\n    \"dashboard.no_tasks\": \"На сегодня задач нет\",\n    \"dashboard.add_first_task\": \"Добавьте первую задачу\",\n    \"dashboard.active_goals\": \"Активные цели\",\n    \"dashboard.no_goals\": \"Активных целей нет\",\n    \"dashboard.add_first_goal\": \"Поставьте первую цель\",\n    \"dashboard.weekly_view\": \"Недельный обзор\",\n    \"dashboard.statistics\": \"Статистика\",\n    \"dashboard.weekly_completion\": \"Недельное выполнение\",\n    \"dashboard.completed_goals\": \"Выполненные цели\",\n    \"dashboard.current_streak\": \"Текущая серия\",\n    \"dashboard.total_tasks\": \"Всего задач\",\n    \n    // Tasks\n    \"tasks.title\": \"Задачи\",\n    \"tasks.all\": \"Все\",\n    \"tasks.work\": \"Работа\",\n    \"tasks.health\": \"Здоровье\",\n    \"tasks.education\": \"Образование\",\n    \"tasks.personal\": \"Личное\",\n    \"tasks.active\": \"Активные\",\n    \"tasks.completed\": \"Выполненные\",\n    \"tasks.no_active\": \"Активных задач нет\",\n    \"tasks.no_completed\": \"Пока не выполнена ни одна задача\",\n    \"tasks.add_task\": \"Добавить задачу\",\n    \n    // Goals\n    \"goals.title\": \"Цели\",\n    \"goals.active\": \"Активные\",\n    \"goals.completed\": \"Выполненные\",\n    \"goals.no_active\": \"Активных целей нет\",\n    \"goals.no_completed\": \"Пока не выполнена ни одна цель\",\n    \"goals.add_goal\": \"Поставить цель\",\n    \"goals.progress\": \"Прогресс\",\n    \"goals.deadline\": \"Дедлайн\",\n    \"goals.update\": \"Обновить\",\n    \n    // Profile\n    \"profile.statistics\": \"Статистика\",\n    \"profile.tasks\": \"Задачи\",\n    \"profile.goals\": \"Цели\",\n    \"profile.achievements\": \"Достижения\",\n    \"profile.overall\": \"Общие показатели\",\n    \"profile.completed_tasks\": \"Выполненные задачи\",\n    \"profile.completed_goals\": \"Выполненные цели\",\n    \"profile.weekly_completion\": \"Недельное выполнение\",\n    \"profile.current_streak\": \"Текущая серия\",\n    \"profile.this_month\": \"В этом месяце\",\n    \"profile.completion_rate\": \"Уровень выполнения\",\n    \"profile.recent_achievements\": \"Последние достижения\",\n    \"profile.no_achievements\": \"Достижений пока нет\",\n    \"profile.achieve_message\": \"Выполняйте задачи и достигайте целей!\",\n    \"profile.settings\": \"Настройки\",\n    \"profile.logout\": \"Выйти\",\n    \"profile.language\": \"Язык\",\n    \"profile.theme\": \"Тема\",\n    \"profile.dark_mode\": \"Темная тема\",\n    \"profile.light_mode\": \"Светлая тема\",\n    \n    // Forms\n    \"form.task_title\": \"Название задачи\",\n    \"form.task_title_placeholder\": \"Введите название задачи...\",\n    \"form.category\": \"Категория\",\n    \"form.category_placeholder\": \"Выберите категорию\",\n    \"form.time\": \"Время\",\n    \"form.date\": \"Дата\",\n    \"form.cancel\": \"Отмена\",\n    \"form.save\": \"Сохранить\",\n    \"form.create\": \"Создать\",\n    \"form.goal_title\": \"Название цели\",\n    \"form.goal_title_placeholder\": \"Введите название цели...\",\n    \"form.description\": \"Описание\",\n    \"form.description_placeholder\": \"Подробнее о цели...\",\n    \"form.target_value\": \"Целевое значение\",\n    \"form.unit\": \"Единица\",\n    \"form.unit_placeholder\": \"дни, уроки, книги...\",\n    \"form.deadline\": \"Дата окончания\",\n    \n    // Categories\n    \"category.work\": \"Работа\",\n    \"category.health\": \"Здоровье\",\n    \"category.education\": \"Образование\",\n    \"category.personal\": \"Личное\",\n    \"category.career\": \"Карьерное развитие\",\n    \"category.financial\": \"Финансовое\",\n    \n    // Common\n    \"common.loading\": \"Загрузка...\",\n    \"common.add\": \"Добавить\",\n    \"common.edit\": \"Редактировать\",\n    \"common.delete\": \"Удалить\",\n    \"common.view_all\": \"Посмотреть все\",\n    \"common.success\": \"Успех!\",\n    \"common.error\": \"Ошибка!\",\n    \"common.days\": \"дни\",\n    \"common.day\": \"день\",\n    \"common.week\": \"неделя\",\n    \"common.month\": \"месяц\", \n    \"common.year\": \"год\",\n    \"common.user\": \"Пользователь\",\n    \n    // Additional translations  \n    \"profile.motivation\": \"Выполняйте задачи и достигайте целей!\",\n    \"profile.system_mode\": \"Система\",\n    \"goals.updated_success\": \"Цель обновлена\",\n    \"goals.updated_error\": \"Цель не обновлена\",\n    \"goals.deleted_success\": \"Цель удалена\", \n    \"goals.deleted_error\": \"Цель не удалена\",\n    \"tasks.updated_error\": \"Задача не обновлена\",\n    \"tasks.deleted_success\": \"Задача удалена\",\n    \"tasks.deleted_error\": \"Задача не удалена\",\n    \n    // Dashboard additional\n    \"dashboard.add_task_desc\": \"Новый план\",\n    \"dashboard.add_goal_desc\": \"Новый путь\",\n  },\n  \n  en: {\n    // Navigation\n    \"nav.home\": \"Home\",\n    \"nav.tasks\": \"Tasks\",\n    \"nav.goals\": \"Goals\",\n    \"nav.calendar\": \"Calendar\",\n    \"nav.profile\": \"Profile\",\n    \n    // Dashboard\n    \"dashboard.greeting\": \"Hello, {name}!\",\n    \"dashboard.ready\": \"Ready for today?\",\n    \"dashboard.today\": \"Today\",\n    \"dashboard.completed\": \"Completed\",\n    \"dashboard.total\": \"Total\",\n    \"dashboard.streak\": \"Streak\",\n    \"dashboard.add_task\": \"Add Task\",\n    \"dashboard.add_goal\": \"Set Goal\",\n    \"dashboard.today_tasks\": \"Today's Tasks\",\n    \"dashboard.no_tasks\": \"No tasks for today\",\n    \"dashboard.add_first_task\": \"Add your first task\",\n    \"dashboard.active_goals\": \"Active Goals\",\n    \"dashboard.no_goals\": \"No active goals\",\n    \"dashboard.add_first_goal\": \"Set your first goal\",\n    \"dashboard.weekly_view\": \"Weekly View\",\n    \"dashboard.statistics\": \"Statistics\",\n    \"dashboard.weekly_completion\": \"Weekly Completion\",\n    \"dashboard.completed_goals\": \"Completed Goals\",\n    \"dashboard.current_streak\": \"Current Streak\",\n    \"dashboard.total_tasks\": \"Total Tasks\",\n    \n    // Tasks\n    \"tasks.title\": \"Tasks\",\n    \"tasks.all\": \"All\",\n    \"tasks.work\": \"Work\",\n    \"tasks.health\": \"Health\",\n    \"tasks.education\": \"Education\",\n    \"tasks.personal\": \"Personal\",\n    \"tasks.active\": \"Active\",\n    \"tasks.completed\": \"Completed\",\n    \"tasks.no_active\": \"No active tasks\",\n    \"tasks.no_completed\": \"No tasks completed yet\",\n    \"tasks.add_task\": \"Add Task\",\n    \n    // Goals\n    \"goals.title\": \"Goals\",\n    \"goals.active\": \"Active\",\n    \"goals.completed\": \"Completed\",\n    \"goals.no_active\": \"No active goals\",\n    \"goals.no_completed\": \"No goals completed yet\",\n    \"goals.add_goal\": \"Set Goal\",\n    \"goals.progress\": \"Progress\",\n    \"goals.deadline\": \"Deadline\",\n    \"goals.update\": \"Update\",\n    \n    // Profile\n    \"profile.statistics\": \"Statistics\",\n    \"profile.tasks\": \"Tasks\",\n    \"profile.goals\": \"Goals\",\n    \"profile.achievements\": \"Achievements\",\n    \"profile.overall\": \"Overall Statistics\",\n    \"profile.completed_tasks\": \"Completed Tasks\",\n    \"profile.completed_goals\": \"Completed Goals\",\n    \"profile.weekly_completion\": \"Weekly Completion\",\n    \"profile.current_streak\": \"Current Streak\",\n    \"profile.this_month\": \"This Month\",\n    \"profile.completion_rate\": \"Completion Rate\",\n    \"profile.recent_achievements\": \"Recent Achievements\",\n    \"profile.no_achievements\": \"No achievements yet\",\n    \"profile.achieve_message\": \"Complete tasks and reach your goals!\",\n    \"profile.settings\": \"Settings\",\n    \"profile.logout\": \"Logout\",\n    \"profile.language\": \"Language\",\n    \"profile.theme\": \"Theme\",\n    \"profile.dark_mode\": \"Dark Mode\",\n    \"profile.light_mode\": \"Light Mode\",\n    \n    // Forms\n    \"form.task_title\": \"Task Title\",\n    \"form.task_title_placeholder\": \"Enter task title...\",\n    \"form.category\": \"Category\",\n    \"form.category_placeholder\": \"Select category\",\n    \"form.time\": \"Time\",\n    \"form.date\": \"Date\",\n    \"form.cancel\": \"Cancel\",\n    \"form.save\": \"Save\",\n    \"form.create\": \"Create\",\n    \"form.goal_title\": \"Goal Title\",\n    \"form.goal_title_placeholder\": \"Enter goal title...\",\n    \"form.description\": \"Description\",\n    \"form.description_placeholder\": \"Goal details...\",\n    \"form.target_value\": \"Target Value\",\n    \"form.unit\": \"Unit\",\n    \"form.unit_placeholder\": \"days, lessons, books...\",\n    \"form.deadline\": \"Deadline\",\n    \n    // Categories\n    \"category.work\": \"Work\",\n    \"category.health\": \"Health\",\n    \"category.education\": \"Education\",\n    \"category.personal\": \"Personal\",\n    \"category.career\": \"Career Development\",\n    \"category.financial\": \"Financial\",\n    \n    // Common\n    \"common.loading\": \"Loading...\",\n    \"common.add\": \"Add\",\n    \"common.edit\": \"Edit\",\n    \"common.delete\": \"Delete\",\n    \"common.view_all\": \"View All\",\n    \"common.success\": \"Success!\",\n    \"common.error\": \"Error!\",\n    \"common.days\": \"days\",\n    \"common.day\": \"day\",\n    \"common.week\": \"week\",\n    \"common.month\": \"month\",\n    \"common.year\": \"year\",\n    \"common.user\": \"User\",\n    \n    // Additional translations\n    \"profile.motivation\": \"Complete tasks and achieve your goals!\",\n    \"profile.system_mode\": \"System\",\n    \"goals.updated_success\": \"Goal updated\",\n    \"goals.updated_error\": \"Goal not updated\",\n    \"goals.deleted_success\": \"Goal deleted\",\n    \"goals.deleted_error\": \"Goal not deleted\", \n    \"tasks.updated_error\": \"Task not updated\",\n    \"tasks.deleted_success\": \"Task deleted\",\n    \"tasks.deleted_error\": \"Task not deleted\",\n    \n    // Dashboard additional  \n    \"dashboard.add_task_desc\": \"New plan\",\n    \"dashboard.add_goal_desc\": \"New path\",\n  }\n};\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  const [language, setLanguage] = useState<Language>(() => {\n    // Try to get from localStorage first\n    const stored = localStorage.getItem('language') as Language;\n    if (stored && ['uz', 'ru', 'en'].includes(stored)) {\n      return stored;\n    }\n    \n    // Auto-detect from Telegram\n    const tgUser = tgApp.getUser();\n    if (tgUser?.language_code) {\n      if (tgUser.language_code.startsWith('ru')) return 'ru';\n      if (tgUser.language_code.startsWith('en')) return 'en';\n      if (tgUser.language_code.startsWith('uz')) return 'uz';\n    }\n    \n    // Default to Uzbek\n    return 'uz';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  const t = (key: string, params?: Record<string, string>) => {\n    // Get the correct translation object for the current language\n    const langTranslations = translations[language];\n    \n    // Use simple key lookup - no nested keys for now to fix the issue\n    let value = langTranslations[key as keyof typeof langTranslations];\n    \n    if (typeof value !== 'string') {\n      // Fallback to uz if translation not found\n      value = translations.uz[key as keyof typeof translations.uz];\n      if (typeof value !== 'string') {\n        return key; // Return key if no translation found\n      }\n    }\n    \n    let result = value;\n    \n    // Replace parameters like {name}\n    if (params) {\n      Object.entries(params).forEach(([param, val]) => {\n        result = result.replace(new RegExp(`\\\\{${param}\\\\}`, 'g'), val);\n      });\n    }\n    \n    return result;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};","size_bytes":18065},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/telegram.ts":{"content":"declare global {\n  interface Window {\n    Telegram?: {\n      WebApp: {\n        ready(): void;\n        expand(): void;\n        close(): void;\n        themeParams: {\n          bg_color?: string;\n          text_color?: string;\n          hint_color?: string;\n          link_color?: string;\n          button_color?: string;\n          button_text_color?: string;\n        };\n        initDataUnsafe: {\n          user?: {\n            id: number;\n            first_name: string;\n            last_name?: string;\n            username?: string;\n            language_code?: string;\n          };\n        };\n        MainButton: {\n          text: string;\n          color: string;\n          textColor: string;\n          isVisible: boolean;\n          isActive: boolean;\n          show(): void;\n          hide(): void;\n          enable(): void;\n          disable(): void;\n          onClick(callback: () => void): void;\n          offClick(callback: () => void): void;\n        };\n        BackButton: {\n          isVisible: boolean;\n          show(): void;\n          hide(): void;\n          onClick(callback: () => void): void;\n          offClick(callback: () => void): void;\n        };\n      };\n    };\n  }\n}\n\nexport interface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  language_code?: string;\n}\n\nexport class TelegramWebApp {\n  private static instance: TelegramWebApp;\n  \n  public static getInstance(): TelegramWebApp {\n    if (!TelegramWebApp.instance) {\n      TelegramWebApp.instance = new TelegramWebApp();\n    }\n    return TelegramWebApp.instance;\n  }\n\n  public isReady(): boolean {\n    return typeof window !== 'undefined' && !!window.Telegram?.WebApp;\n  }\n\n  public init(): void {\n    if (this.isReady()) {\n      window.Telegram!.WebApp.ready();\n      window.Telegram!.WebApp.expand();\n    }\n  }\n\n  public getUser(): TelegramUser | null {\n    if (!this.isReady()) return null;\n    return window.Telegram!.WebApp.initDataUnsafe.user || null;\n  }\n\n  public getThemeParams() {\n    if (!this.isReady()) return {};\n    return window.Telegram!.WebApp.themeParams;\n  }\n\n  public close(): void {\n    if (this.isReady()) {\n      window.Telegram!.WebApp.close();\n    }\n  }\n\n  public showMainButton(text: string, callback: () => void): void {\n    if (!this.isReady()) return;\n    \n    const mainButton = window.Telegram!.WebApp.MainButton;\n    mainButton.text = text;\n    mainButton.onClick(callback);\n    mainButton.show();\n    mainButton.enable();\n  }\n\n  public hideMainButton(): void {\n    if (!this.isReady()) return;\n    window.Telegram!.WebApp.MainButton.hide();\n  }\n\n  public showBackButton(callback: () => void): void {\n    if (!this.isReady()) return;\n    \n    const backButton = window.Telegram!.WebApp.BackButton;\n    backButton.onClick(callback);\n    backButton.show();\n  }\n\n  public hideBackButton(): void {\n    if (!this.isReady()) return;\n    window.Telegram!.WebApp.BackButton.hide();\n  }\n}\n\nexport const tgApp = TelegramWebApp.getInstance();\n","size_bytes":2985},"client/src/lib/theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"client/src/lib/user-service.ts":{"content":"import { tgApp } from \"./telegram\";\nimport { apiRequest } from \"./queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport class UserService {\n  private static instance: UserService;\n  private currentUser: User | null = null;\n\n  public static getInstance(): UserService {\n    if (!UserService.instance) {\n      UserService.instance = new UserService();\n    }\n    return UserService.instance;\n  }\n\n  public async getCurrentUser(): Promise<User | null> {\n    if (this.currentUser) {\n      return this.currentUser;\n    }\n\n    const tgUser = tgApp.getUser();\n    if (!tgUser) {\n      // For demo purposes, create a default user\n      return this.createDemoUser();\n    }\n\n    try {\n      // Try to get user by Telegram ID\n      const response = await apiRequest(\"GET\", `/api/users/telegram/${tgUser.id}`);\n      if (response.ok) {\n        this.currentUser = await response.json();\n        return this.currentUser;\n      }\n    } catch (error) {\n      console.log(\"User not found, creating new user\");\n    }\n\n    // User doesn't exist, create new one\n    try {\n      const newUser = {\n        username: tgUser.username || `user_${tgUser.id}`,\n        password: \"telegram_auth\", // We don't use passwords for Telegram auth\n        name: `${tgUser.first_name}${tgUser.last_name ? ' ' + tgUser.last_name : ''}`,\n        telegramId: tgUser.id.toString()\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/users\", newUser);\n      if (response.ok) {\n        this.currentUser = await response.json();\n        return this.currentUser;\n      }\n    } catch (error) {\n      console.error(\"Failed to create user:\", error);\n    }\n\n    return null;\n  }\n\n  private async createDemoUser(): Promise<User> {\n    if (this.currentUser) {\n      return this.currentUser;\n    }\n\n    try {\n      const demoUser = {\n        username: \"demo_user\",\n        password: \"demo_password\",\n        name: \"Demo Foydalanuvchi\",\n        telegramId: null\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/users\", demoUser);\n      if (response.ok) {\n        this.currentUser = await response.json();\n        return this.currentUser!;\n      }\n    } catch (error) {\n      // If demo user already exists, try to get it\n      try {\n        const response = await apiRequest(\"GET\", \"/api/users/722b51ba-3593-44ac-82e1-ae79ac0c3304\");\n        if (response.ok) {\n          this.currentUser = await response.json();\n          return this.currentUser!;\n        }\n      } catch (e) {\n        console.error(\"Failed to get demo user:\", e);\n      }\n    }\n\n    // Return a fallback user\n    return {\n      id: \"demo-user\",\n      username: \"demo_user\",\n      password: \"demo_password\",\n      name: \"Demo Foydalanuvchi\",\n      telegramId: null\n    };\n  }\n\n  public getUserId(): string {\n    return this.currentUser?.id || \"demo-user\";\n  }\n\n  public clearUser(): void {\n    this.currentUser = null;\n  }\n}\n\nexport const userService = UserService.getInstance();","size_bytes":2933},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { TaskModal } from \"@/components/task-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { tgApp } from \"@/lib/telegram\";\nimport { type Task } from \"@shared/schema\";\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [taskModalOpen, setTaskModalOpen] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState<string>(\"demo-user\");\n\n  useEffect(() => {\n    const telegramUser = tgApp.getUser();\n    if (telegramUser) {\n      setCurrentUserId(telegramUser.id.toString());\n    }\n  }, []);\n\n  const { data: allTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  const getMonthDays = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const firstDayOfWeek = firstDay.getDay();\n    const daysInMonth = lastDay.getDate();\n\n    const days = [];\n    \n    // Previous month days\n    for (let i = firstDayOfWeek - 1; i >= 0; i--) {\n      const date = new Date(year, month, -i);\n      days.push({\n        date: date.getDate(),\n        isCurrentMonth: false,\n        fullDate: date.toISOString().split('T')[0],\n        tasks: []\n      });\n    }\n    \n    // Current month days\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(year, month, day);\n      const dateStr = date.toISOString().split('T')[0];\n      const dayTasks = allTasks.filter(task => task.date === dateStr);\n      \n      days.push({\n        date: day,\n        isCurrentMonth: true,\n        fullDate: dateStr,\n        tasks: dayTasks,\n        isToday: dateStr === new Date().toISOString().split('T')[0]\n      });\n    }\n    \n    return days;\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      newDate.setMonth(prev.getMonth() + (direction === 'next' ? 1 : -1));\n      return newDate;\n    });\n  };\n\n  const selectedDateTasks = selectedDate \n    ? allTasks.filter(task => task.date === selectedDate)\n    : [];\n\n  const monthNames = [\n    'Yanvar', 'Fevral', 'Mart', 'Aprel', 'May', 'Iyun',\n    'Iyul', 'Avgust', 'Sentabr', 'Oktabr', 'Noyabr', 'Dekabr'\n  ];\n\n  const weekDays = ['Ya', 'Du', 'Se', 'Ch', 'Pa', 'Ju', 'Sh'];\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      <AppHeader />\n      \n      <main className=\"px-4\">\n        <div className=\"flex items-center justify-between my-6\">\n          <h1 className=\"text-2xl font-bold text-foreground\">Kalendar</h1>\n          <Button onClick={() => setTaskModalOpen(true)} data-testid=\"button-add-task\">\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Calendar Header */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl font-semibold text-foreground\">\n                {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n              </h2>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => navigateMonth('prev')}\n                  data-testid=\"button-prev-month\"\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => navigateMonth('next')}\n                  data-testid=\"button-next-month\"\n                >\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            {/* Week Days Header */}\n            <div className=\"grid grid-cols-7 gap-1 mb-2\">\n              {weekDays.map(day => (\n                <div key={day} className=\"text-center text-sm font-medium text-muted-foreground py-2\">\n                  {day}\n                </div>\n              ))}\n            </div>\n            \n            {/* Calendar Grid */}\n            <div className=\"grid grid-cols-7 gap-1\">\n              {getMonthDays().map((day, index) => (\n                <button\n                  key={index}\n                  className={`\n                    relative p-2 rounded-lg text-sm transition-colors min-h-[40px]\n                    ${day.isCurrentMonth \n                      ? 'text-foreground hover:bg-muted' \n                      : 'text-muted-foreground opacity-50'\n                    }\n                    ${day.isToday ? 'bg-primary text-primary-foreground hover:bg-primary/90' : ''}\n                    ${selectedDate === day.fullDate ? 'ring-2 ring-ring' : ''}\n                  `}\n                  onClick={() => setSelectedDate(day.fullDate)}\n                  data-testid={`button-calendar-day-${day.fullDate}`}\n                >\n                  <span>{day.date}</span>\n                  {day.tasks.length > 0 && (\n                    <div className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2\">\n                      <div className=\"w-1 h-1 bg-secondary rounded-full\"></div>\n                    </div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Selected Date Tasks */}\n        {selectedDate && (\n          <Card>\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-semibold text-foreground mb-4\">\n                {new Date(selectedDate).toLocaleDateString('uz-UZ', { \n                  day: 'numeric', \n                  month: 'long',\n                  year: 'numeric'\n                })} kunidagi vazifalar\n              </h3>\n              \n              {selectedDateTasks.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground mb-4\">Bu kun uchun vazifalar yo'q</p>\n                  <Button \n                    onClick={() => setTaskModalOpen(true)}\n                    data-testid=\"button-add-task-for-date\"\n                  >\n                    Vazifa qo'shing\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {selectedDateTasks.map((task) => (\n                    <div key={task.id} className=\"flex items-center space-x-3 p-3 bg-muted/50 rounded-lg\">\n                      <div className={`w-3 h-3 rounded-full ${\n                        task.completed ? 'bg-secondary' : 'bg-muted-foreground'\n                      }`} />\n                      <div className=\"flex-1\">\n                        <div className={`font-medium ${task.completed ? 'line-through opacity-70' : ''}`}>\n                          {task.title}\n                        </div>\n                        {task.time && (\n                          <div className=\"text-sm text-muted-foreground\">{task.time}</div>\n                        )}\n                      </div>\n                      <div className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full\">\n                        {task.category}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </main>\n\n      <BottomNavigation />\n      \n      <TaskModal \n        open={taskModalOpen} \n        onOpenChange={setTaskModalOpen}\n        userId={currentUserId}\n      />\n    </div>\n  );\n}\n","size_bytes":8032},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { TaskModal } from \"@/components/task-modal\";\nimport { GoalModal } from \"@/components/goal-modal\";\nimport { ProgressRing } from \"@/components/progress-ring\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { userService } from \"@/lib/user-service\";\nimport { useLanguage } from \"@/lib/language\";\nimport { type Task, type Goal, type Achievement } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [taskModalOpen, setTaskModalOpen] = useState(false);\n  const [goalModalOpen, setGoalModalOpen] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState<string>(\"demo-user\");\n  const { t } = useLanguage();\n\n  const today = new Date().toISOString().split('T')[0];\n\n  // Initialize user\n  useEffect(() => {\n    const initUser = async () => {\n      const user = await userService.getCurrentUser();\n      if (user) {\n        setCurrentUserId(user.id);\n      }\n    };\n    initUser();\n  }, []);\n\n  // Fetch today's tasks\n  const { data: todayTasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\", currentUserId, \"date\", today],\n    enabled: !!currentUserId,\n  });\n\n  // Fetch active goals\n  const { data: activeGoals = [], isLoading: goalsLoading } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\", currentUserId, \"active\"],\n    enabled: !!currentUserId,\n  });\n\n  // Fetch user stats\n  const { data: stats, isLoading: statsLoading } = useQuery<{\n    totalTasks: number;\n    completedTasks: number;\n    totalGoals: number;\n    completedGoals: number;\n    currentStreak: number;\n    weeklyCompletionRate: number;\n  }>({\n    queryKey: [\"/api/stats\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  // Fetch recent achievements\n  const { data: achievements = [], isLoading: achievementsLoading } = useQuery<Achievement[]>({\n    queryKey: [\"/api/achievements\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  const completionPercentage = stats ? Math.round((stats.completedTasks / Math.max(stats.totalTasks, 1)) * 100) : 0;\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('uz-UZ', { \n      day: 'numeric', \n      month: 'long' \n    });\n  };\n\n  const getDayOfWeek = (offset: number) => {\n    const days = ['Ya', 'Du', 'Se', 'Ch', 'Pa', 'Ju', 'Sh'];\n    const today = new Date();\n    const day = new Date(today);\n    day.setDate(today.getDate() + offset);\n    return {\n      name: days[day.getDay()],\n      date: day.getDate(),\n      isToday: offset === 0\n    };\n  };\n\n  if (tasksLoading || goalsLoading || statsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      <AppHeader />\n      \n      <main className=\"px-4\">\n        {/* Daily Overview Section */}\n        <section className=\"mt-6 mb-8\">\n          <div className=\"bg-gradient-to-br from-primary to-accent p-6 rounded-2xl text-primary-foreground mb-6 slide-up\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h2 className=\"text-xl font-bold\">{t('dashboard.today')}</h2>\n                <p className=\"text-primary-foreground/80\">\n                  {new Date().toLocaleDateString('uz-UZ', { \n                    day: 'numeric', \n                    month: 'long', \n                    year: 'numeric' \n                  })}\n                </p>\n              </div>\n              <ProgressRing \n                progress={completionPercentage}\n                className=\"text-primary-foreground\"\n              />\n            </div>\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-completed-tasks\">\n                  {stats?.completedTasks || 0}\n                </div>\n                <div className=\"text-sm text-primary-foreground/80\">{t('dashboard.completed')}</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-tasks\">\n                  {todayTasks.length}\n                </div>\n                <div className=\"text-sm text-primary-foreground/80\">{t('dashboard.total')}</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-streak\">\n                  {stats?.currentStreak || 0}\n                </div>\n                <div className=\"text-sm text-primary-foreground/80\">{t('dashboard.streak')}</div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Quick Actions */}\n        <section className=\"mb-8\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button\n              variant=\"outline\"\n              className=\"h-auto p-3 justify-start\"\n              onClick={() => setTaskModalOpen(true)}\n              data-testid=\"button-add-task\"\n            >\n              <div className=\"flex items-center space-x-2 w-full\">\n                <div className=\"w-9 h-9 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Plus className=\"w-4 h-4 text-primary\" />\n                </div>\n                <div className=\"text-left min-w-0 flex-1\">\n                  <div className=\"font-medium text-xs text-overflow-fix\">Vazifa</div>\n                  <div className=\"text-xs text-muted-foreground text-overflow-fix\">Qo'shish</div>\n                </div>\n              </div>\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              className=\"h-auto p-3 justify-start\"\n              onClick={() => setGoalModalOpen(true)}\n              data-testid=\"button-add-goal\"\n            >\n              <div className=\"flex items-center space-x-2 w-full\">\n                <div className=\"w-9 h-9 bg-accent/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Plus className=\"w-4 h-4 text-accent\" />\n                </div>\n                <div className=\"text-left min-w-0 flex-1\">\n                  <div className=\"font-medium text-xs text-overflow-fix\">Maqsad</div>\n                  <div className=\"text-xs text-muted-foreground text-overflow-fix\">Belgilash</div>\n                </div>\n              </div>\n            </Button>\n          </div>\n        </section>\n\n        {/* Today's Tasks */}\n        <section className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-foreground\">Bugungi vazifalar</h3>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-tasks\">\n              Barchasini ko'rish\n            </Button>\n          </div>\n          \n          {todayTasks.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">Bugungi kun uchun vazifalar yo'q</p>\n                <Button \n                  className=\"mt-4\" \n                  onClick={() => setTaskModalOpen(true)}\n                  data-testid=\"button-add-first-task\"\n                >\n                  Birinchi vazifani qo'shing\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-3\">\n              {todayTasks.slice(0, 3).map((task) => (\n                <TaskCard key={task.id} task={task} />\n              ))}\n            </div>\n          )}\n        </section>\n\n        {/* Active Goals */}\n        <section className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-foreground\">Faol maqsadlar</h3>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-goals\">\n              Barchasini ko'rish\n            </Button>\n          </div>\n          \n          {activeGoals.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">Faol maqsadlar yo'q</p>\n                <Button \n                  className=\"mt-4\" \n                  onClick={() => setGoalModalOpen(true)}\n                  data-testid=\"button-add-first-goal\"\n                >\n                  Birinchi maqsadni belgilang\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {activeGoals.slice(0, 2).map((goal) => (\n                <GoalCard key={goal.id} goal={goal} />\n              ))}\n            </div>\n          )}\n        </section>\n\n        {/* Weekly Overview */}\n        <section className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Haftalik ko'rinish</h3>\n          <Card>\n            <CardContent className=\"p-5\">\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {Array.from({ length: 7 }, (_, i) => i - 3).map((offset) => {\n                  const day = getDayOfWeek(offset);\n                  return (\n                    <div key={offset} className=\"text-center\">\n                      <div className={`text-xs mb-2 ${day.isToday ? 'text-primary' : 'text-muted-foreground'}`}>\n                        {day.name}\n                      </div>\n                      <div className={`w-8 h-8 rounded-full text-sm font-medium flex items-center justify-center ${\n                        day.isToday \n                          ? 'bg-primary text-primary-foreground' \n                          : 'bg-muted text-muted-foreground'\n                      }`}>\n                        {day.date}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Bu hafta: {stats?.weeklyCompletionRate || 0}% bajarilgan\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-calendar\">\n                  Kalendar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Statistics Overview */}\n        <section className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Statistika</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary mb-1\" data-testid=\"text-weekly-completion\">\n                  {stats?.weeklyCompletionRate || 0}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Haftalik bajarish</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"text-completed-goals\">\n                  {stats?.completedGoals || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Bajarilgan maqsadlar</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-accent mb-1\" data-testid=\"text-current-streak\">\n                  {stats?.currentStreak || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Joriy ketma-ketlik</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"text-total-tasks-stat\">\n                  {stats?.totalTasks || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Jami vazifalar</div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n      </main>\n\n      {/* Floating Action Button */}\n      <Button\n        className=\"fixed bottom-20 right-4 w-14 h-14 rounded-full shadow-lg hover:scale-105 transition-all duration-200\"\n        onClick={() => setTaskModalOpen(true)}\n        data-testid=\"button-quick-add\"\n      >\n        <Plus className=\"w-6 h-6\" />\n      </Button>\n\n      <BottomNavigation />\n      \n      <TaskModal \n        open={taskModalOpen} \n        onOpenChange={setTaskModalOpen}\n        userId={currentUserId}\n      />\n      \n      <GoalModal \n        open={goalModalOpen} \n        onOpenChange={setGoalModalOpen}\n        userId={currentUserId}\n      />\n    </div>\n  );\n}\n\nfunction TaskCard({ task }: { task: Task }) {\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'salomatlik': return 'bg-secondary/10 text-secondary';\n      case 'ish': return 'bg-primary/10 text-primary';\n      case 'talim': return 'bg-accent/10 text-accent';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            className={`w-5 h-5 border-2 rounded-full flex items-center justify-center transition-colors ${\n              task.completed \n                ? 'bg-secondary border-secondary' \n                : 'border-muted-foreground hover:border-secondary'\n            }`}\n            data-testid={`button-toggle-task-${task.id}`}\n          >\n            {task.completed && (\n              <svg className=\"w-3 h-3 text-secondary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            )}\n          </button>\n          <div className=\"flex-1\">\n            <div className={`font-medium text-foreground ${task.completed ? 'line-through opacity-70' : ''}`}>\n              {task.title}\n            </div>\n            {task.time && (\n              <div className=\"text-sm text-muted-foreground\">{task.time}</div>\n            )}\n          </div>\n          <div className={`text-xs px-2 py-1 rounded-full ${getCategoryColor(task.category)}`}>\n            {task.category.charAt(0).toUpperCase() + task.category.slice(1)}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction GoalCard({ goal }: { goal: Goal }) {\n  const progressPercentage = (goal.currentValue / goal.targetValue) * 100;\n  \n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'salomatlik': return 'bg-secondary/10 text-secondary';\n      case 'talim': return 'bg-accent/10 text-accent';\n      case 'kasbiy': return 'bg-primary/10 text-primary';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-5\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-semibold text-foreground\">{goal.title}</h4>\n          <span className={`text-sm px-2 py-1 rounded-full ${getCategoryColor(goal.category)}`}>\n            {goal.category.charAt(0).toUpperCase() + goal.category.slice(1)}\n          </span>\n        </div>\n        <div className=\"mb-3\">\n          <div className=\"flex justify-between text-sm mb-1\">\n            <span className=\"text-muted-foreground\">Jarayon</span>\n            <span className=\"font-medium\">\n              {goal.currentValue}/{goal.targetValue} {goal.unit}\n            </span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"bg-secondary h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${Math.min(progressPercentage, 100)}%` }}\n            />\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-muted-foreground\">\n            Tugash: {formatDate(goal.deadline)}\n          </span>\n          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-update-goal-${goal.id}`}>\n            Yangilash\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":16910},"client/src/pages/goals.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Plus, Edit, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { GoalModal } from \"@/components/goal-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { tgApp } from \"@/lib/telegram\";\nimport { useLanguage } from \"@/lib/language\";\nimport { type Goal } from \"@shared/schema\";\n\nexport default function Goals() {\n  const [goalModalOpen, setGoalModalOpen] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState<string>(\"demo-user\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t } = useLanguage();\n\n  useEffect(() => {\n    const telegramUser = tgApp.getUser();\n    if (telegramUser) {\n      setCurrentUserId(telegramUser.id.toString());\n    }\n  }, []);\n\n  const { data: allGoals = [], isLoading } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  const updateGoalMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Goal> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/goals/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\", currentUserId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", currentUserId] });\n      toast({\n        title: t('common.success'),\n        description: t('goals.updated_success'),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t('common.error'),\n        description: t('goals.updated_error'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteGoalMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/goals/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\", currentUserId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", currentUserId] });\n      toast({\n        title: t('common.success'),\n        description: t('goals.deleted_success'),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t('common.error'),\n        description: t('goals.deleted_error'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const activeGoals = allGoals.filter(goal => !goal.completed);\n  const completedGoals = allGoals.filter(goal => goal.completed);\n\n  const incrementGoalProgress = (goal: Goal) => {\n    if (goal.currentValue < goal.targetValue) {\n      const newValue = goal.currentValue + 1;\n      const completed = newValue >= goal.targetValue;\n      \n      updateGoalMutation.mutate({\n        id: goal.id,\n        updates: { \n          currentValue: newValue,\n          completed \n        }\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">{t('common.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      <AppHeader />\n      \n      <main className=\"px-4\">\n        <div className=\"flex items-center justify-between my-6\">\n          <h1 className=\"text-2xl font-bold text-foreground\">{t('goals.title')}</h1>\n          <Button onClick={() => setGoalModalOpen(true)} data-testid=\"button-add-goal\">\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"active\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"active\" data-testid=\"tab-active-goals\">\n              {t('goals.active')} ({activeGoals.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed-goals\">\n              {t('goals.completed')} ({completedGoals.length})\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"active\" className=\"mt-6\">\n            {activeGoals.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground mb-4\">Faol maqsadlar yo'q</p>\n                  <Button onClick={() => setGoalModalOpen(true)} data-testid=\"button-add-first-goal\">\n                    Maqsad belgilang\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {activeGoals.map((goal) => (\n                  <GoalCard \n                    key={goal.id} \n                    goal={goal} \n                    onIncrement={() => incrementGoalProgress(goal)}\n                    onDelete={() => deleteGoalMutation.mutate(goal.id)}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"completed\" className=\"mt-6\">\n            {completedGoals.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground\">Hali hech qanday maqsad bajarilmagan</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {completedGoals.map((goal) => (\n                  <GoalCard \n                    key={goal.id} \n                    goal={goal} \n                    onIncrement={() => {}}\n                    onDelete={() => deleteGoalMutation.mutate(goal.id)}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      <Button\n        className=\"fixed bottom-20 right-4 w-14 h-14 rounded-full shadow-lg hover:scale-105 transition-all duration-200\"\n        onClick={() => setGoalModalOpen(true)}\n        data-testid=\"button-quick-add-goal\"\n      >\n        <Plus className=\"w-6 h-6\" />\n      </Button>\n\n      <BottomNavigation />\n      \n      <GoalModal \n        open={goalModalOpen} \n        onOpenChange={setGoalModalOpen}\n        userId={currentUserId}\n      />\n    </div>\n  );\n}\n\ninterface GoalCardProps {\n  goal: Goal;\n  onIncrement: () => void;\n  onDelete: () => void;\n}\n\nfunction GoalCard({ goal, onIncrement, onDelete }: GoalCardProps) {\n  const progressPercentage = (goal.currentValue / goal.targetValue) * 100;\n  \n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'salomatlik': return 'bg-secondary/10 text-secondary';\n      case 'talim': return 'bg-accent/10 text-accent';\n      case 'kasbiy': return 'bg-primary/10 text-primary';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('uz-UZ', { \n      day: 'numeric', \n      month: 'long' \n    });\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-5\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-semibold text-foreground\">{goal.title}</h4>\n          <span className={`text-sm px-2 py-1 rounded-full ${getCategoryColor(goal.category)}`}>\n            {goal.category.charAt(0).toUpperCase() + goal.category.slice(1)}\n          </span>\n        </div>\n        \n        {goal.description && (\n          <p className=\"text-sm text-muted-foreground mb-3\">{goal.description}</p>\n        )}\n        \n        <div className=\"mb-3\">\n          <div className=\"flex justify-between text-sm mb-1\">\n            <span className=\"text-muted-foreground\">Jarayon</span>\n            <span className=\"font-medium\">\n              {goal.currentValue}/{goal.targetValue} {goal.unit}\n            </span>\n          </div>\n          <Progress value={progressPercentage} className=\"h-2\" />\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">\n            Tugash: {formatDate(goal.deadline)}\n          </span>\n          <div className=\"flex space-x-2\">\n            {!goal.completed && goal.currentValue < goal.targetValue && (\n              <Button \n                size=\"sm\" \n                onClick={onIncrement}\n                data-testid={`button-increment-goal-${goal.id}`}\n              >\n                +1\n              </Button>\n            )}\n            <Button \n              size=\"sm\" \n              variant=\"destructive\"\n              onClick={onDelete}\n              data-testid={`button-delete-goal-${goal.id}`}\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9355},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { User, Settings, Trophy, TrendingUp, Calendar, Moon, Sun, Globe } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { NotificationPanel } from \"@/components/notification-panel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { tgApp } from \"@/lib/telegram\";\nimport { useTheme } from \"@/lib/theme\";\nimport { useLanguage } from \"@/lib/language\";\nimport { userService } from \"@/lib/user-service\";\nimport { type Achievement } from \"@shared/schema\";\n\nexport default function Profile() {\n  const [currentUserId, setCurrentUserId] = useState<string>(\"demo-user\");\n  const telegramUser = tgApp.getUser();\n  const { theme, setTheme } = useTheme();\n  const { language, setLanguage, t } = useLanguage();\n\n  useEffect(() => {\n    const initUser = async () => {\n      const user = await userService.getCurrentUser();\n      if (user) {\n        setCurrentUserId(user.id);\n      }\n    };\n    initUser();\n  }, []);\n\n  const { data: stats } = useQuery<{\n    totalTasks: number;\n    completedTasks: number;\n    totalGoals: number;\n    completedGoals: number;\n    currentStreak: number;\n    weeklyCompletionRate: number;\n  }>({\n    queryKey: [\"/api/stats\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  const { data: achievements = [] } = useQuery<Achievement[]>({\n    queryKey: [\"/api/achievements\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  const displayName = telegramUser?.first_name || \"Foydalanuvchi\";\n  const username = telegramUser?.username || \"username\";\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      <AppHeader />\n      \n      <main className=\"px-4\">\n        {/* Profile Header */}\n        <section className=\"mt-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <User className=\"w-10 h-10 text-primary-foreground\" />\n              </div>\n              <h2 className=\"text-xl font-bold text-foreground mb-1\" data-testid=\"text-user-name\">\n                {displayName}\n              </h2>\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-username\">\n                @{username}\n              </p>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-bold text-primary\" data-testid=\"text-profile-total-tasks\">\n                    {stats?.totalTasks || 0}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{t('profile.tasks')}</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-secondary\" data-testid=\"text-profile-total-goals\">\n                    {stats?.totalGoals || 0}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{t('profile.goals')}</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-accent\" data-testid=\"text-profile-achievements\">\n                    {achievements.length}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Yutuqlar</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Statistics */}\n        <section className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Statistika</h3>\n          \n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Umumiy ko'rsatkichlar\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Bajarilgan vazifalar</span>\n                  <span className=\"font-medium\">{stats?.completedTasks || 0}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Bajarilgan maqsadlar</span>\n                  <span className=\"font-medium\">{stats?.completedGoals || 0}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Haftalik bajarish</span>\n                  <span className=\"font-medium\">{stats?.weeklyCompletionRate || 0}%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Joriy ketma-ketlik</span>\n                  <span className=\"font-medium\">{stats?.currentStreak || 0} kun</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Bu oyda\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary mb-1\">\n                    {Math.round((stats?.completedTasks || 0) / Math.max((stats?.totalTasks || 1), 1) * 100)}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Bajarish darajasi</div>\n                  <Progress \n                    value={(stats?.completedTasks || 0) / Math.max((stats?.totalTasks || 1), 1) * 100} \n                    className=\"mt-2\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Recent Achievements */}\n        <section className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">So'nggi yutuqlar</h3>\n          \n          {achievements.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Trophy className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">Hali yutuqlar yo'q</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {t('profile.motivation')}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-3\">\n              {achievements.slice(0, 5).map((achievement) => (\n                <Card key={achievement.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center bounce-in\">\n                        <Trophy className=\"w-6 h-6 text-secondary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-foreground\" data-testid={`text-achievement-title-${achievement.id}`}>\n                          {achievement.title}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {achievement.description}\n                        </div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(achievement.date).toLocaleDateString('uz-UZ')}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </section>\n\n        {/* Settings */}\n        <section className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">{t('profile.settings')}</h3>\n          \n          <div className=\"space-y-4\">\n            {/* Language Settings */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Globe className=\"w-5 h-5 text-muted-foreground\" />\n                    <span className=\"font-medium\">{t('profile.language')}</span>\n                  </div>\n                  <Select value={language} onValueChange={(value) => setLanguage(value as \"uz\" | \"ru\" | \"en\")}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue placeholder=\"Til tanlash\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"uz\">O'zbek</SelectItem>\n                      <SelectItem value=\"ru\">Русский</SelectItem>\n                      <SelectItem value=\"en\">English</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Theme Settings */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {theme === 'dark' ? (\n                      <Moon className=\"w-5 h-5 text-muted-foreground\" />\n                    ) : (\n                      <Sun className=\"w-5 h-5 text-muted-foreground\" />\n                    )}\n                    <span className=\"font-medium\">{t('profile.theme')}</span>\n                  </div>\n                  <Select value={theme} onValueChange={(value) => setTheme(value as \"light\" | \"dark\" | \"system\")}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue placeholder=\"Rejim\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"light\">{t('profile.light_mode')}</SelectItem>\n                      <SelectItem value=\"dark\">{t('profile.dark_mode')}</SelectItem>\n                      <SelectItem value=\"system\">{t('profile.system_mode')}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Other Settings */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start\"\n                    data-testid=\"button-settings\"\n                  >\n                    <Settings className=\"w-4 h-4 mr-3\" />\n                    {t('profile.settings')}\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-destructive hover:text-destructive\"\n                    data-testid=\"button-logout\"\n                  >\n                    {t('profile.logout')}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Notification Test Panel */}\n        <section className=\"mb-8\">\n          <NotificationPanel userId={currentUserId} />\n        </section>\n      </main>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":11869},"client/src/pages/tasks.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Plus, Filter } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AppHeader } from \"@/components/app-header\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { TaskModal } from \"@/components/task-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { tgApp } from \"@/lib/telegram\";\nimport { useLanguage } from \"@/lib/language\";\nimport { type Task } from \"@shared/schema\";\n\nexport default function Tasks() {\n  const [taskModalOpen, setTaskModalOpen] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState<string>(\"demo-user\");\n  const [filterCategory, setFilterCategory] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t } = useLanguage();\n\n  useEffect(() => {\n    const telegramUser = tgApp.getUser();\n    if (telegramUser) {\n      setCurrentUserId(telegramUser.id.toString());\n    }\n  }, []);\n\n  const { data: allTasks = [], isLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\", currentUserId],\n    enabled: !!currentUserId,\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Task> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/tasks/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", currentUserId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", currentUserId] });\n    },\n    onError: () => {\n      toast({\n        title: t('common.error'),\n        description: t('tasks.updated_error'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/tasks/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", currentUserId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\", currentUserId] });\n      toast({\n        title: t('common.success'),\n        description: t('tasks.deleted_success'),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t('common.error'),\n        description: t('tasks.deleted_error'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleTaskCompletion = (task: Task) => {\n    updateTaskMutation.mutate({\n      id: task.id,\n      updates: { completed: !task.completed }\n    });\n  };\n\n  const filteredTasks = allTasks.filter(task => \n    filterCategory === \"all\" || task.category === filterCategory\n  );\n\n  const activeTasks = filteredTasks.filter(task => !task.completed);\n  const completedTasks = filteredTasks.filter(task => task.completed);\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'salomatlik': return 'bg-secondary/10 text-secondary';\n      case 'ish': return 'bg-primary/10 text-primary';\n      case 'talim': return 'bg-accent/10 text-accent';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">{t('common.loading')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      <AppHeader />\n      \n      <main className=\"px-4\">\n        <div className=\"flex items-center justify-between my-6\">\n          <h1 className=\"text-2xl font-bold text-foreground\">{t('tasks.title')}</h1>\n          <div className=\"flex space-x-2\">\n            <Select value={filterCategory} onValueChange={setFilterCategory}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-filter-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Barchasi</SelectItem>\n                <SelectItem value=\"ish\">Ish</SelectItem>\n                <SelectItem value=\"salomatlik\">Salomatlik</SelectItem>\n                <SelectItem value=\"talim\">Ta'lim</SelectItem>\n                <SelectItem value=\"shaxsiy\">Shaxsiy</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button onClick={() => setTaskModalOpen(true)} data-testid=\"button-add-task\">\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"active\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"active\" data-testid=\"tab-active-tasks\">\n              Faol ({activeTasks.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed-tasks\">\n              Bajarilgan ({completedTasks.length})\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"active\" className=\"mt-6\">\n            {activeTasks.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground mb-4\">Faol vazifalar yo'q</p>\n                  <Button onClick={() => setTaskModalOpen(true)} data-testid=\"button-add-first-active-task\">\n                    Vazifa qo'shing\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {activeTasks.map((task) => (\n                  <TaskCard \n                    key={task.id} \n                    task={task} \n                    onToggle={() => toggleTaskCompletion(task)}\n                    onDelete={() => deleteTaskMutation.mutate(task.id)}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"completed\" className=\"mt-6\">\n            {completedTasks.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground\">Hali hech qanday vazifa bajarilmagan</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {completedTasks.map((task) => (\n                  <TaskCard \n                    key={task.id} \n                    task={task} \n                    onToggle={() => toggleTaskCompletion(task)}\n                    onDelete={() => deleteTaskMutation.mutate(task.id)}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      <BottomNavigation />\n      \n      <TaskModal \n        open={taskModalOpen} \n        onOpenChange={setTaskModalOpen}\n        userId={currentUserId}\n      />\n    </div>\n  );\n}\n\ninterface TaskCardProps {\n  task: Task;\n  onToggle: () => void;\n  onDelete: () => void;\n}\n\nfunction TaskCard({ task, onToggle, onDelete }: TaskCardProps) {\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'salomatlik': return 'bg-secondary/10 text-secondary';\n      case 'ish': return 'bg-primary/10 text-primary';\n      case 'talim': return 'bg-accent/10 text-accent';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            className={`w-5 h-5 border-2 rounded-full flex items-center justify-center transition-colors ${\n              task.completed \n                ? 'bg-secondary border-secondary' \n                : 'border-muted-foreground hover:border-secondary'\n            }`}\n            onClick={onToggle}\n            data-testid={`button-toggle-task-${task.id}`}\n          >\n            {task.completed && (\n              <svg className=\"w-3 h-3 text-secondary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            )}\n          </button>\n          <div className=\"flex-1\">\n            <div className={`font-medium text-foreground ${task.completed ? 'line-through opacity-70' : ''}`}>\n              {task.title}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              {task.time && `${task.time} • `}\n              {new Date(task.date).toLocaleDateString('uz-UZ')}\n            </div>\n          </div>\n          <div className={`text-xs px-2 py-1 rounded-full ${getCategoryColor(task.category)}`}>\n            {task.category.charAt(0).toUpperCase() + task.category.slice(1)}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9459},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}